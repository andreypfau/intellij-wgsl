/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package wgslplugin.language;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static wgslplugin.language.psi.WGSLTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>WGSLLexer.flex</tt>
 */
public class _WgslLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 1
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [7, 7, 7]
   * Total runtime size is 1928 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>14]|((ch>>7)&0x7f)]<<7)|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 68 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\103\200");

  /* The ZZ_CMAP_Y table has 256 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\53\2\1\3\22\2\1\4\37\2\1\3\237\2");

  /* The ZZ_CMAP_A table has 640 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\1\1\0\1\2\2\0\1\2\22\1\1\0\1\70\1\1\1\22\1\1\1\73\1\72\1\1\1\35\1\36\1"+
    "\4\1\16\1\33\1\5\1\13\1\3\1\6\1\60\1\62\1\63\1\66\5\11\1\67\1\45\1\40\1\65"+
    "\1\41\1\1\1\46\1\76\3\10\1\15\1\10\11\24\1\21\12\24\1\32\1\1\1\34\1\75\1\23"+
    "\1\1\1\27\1\64\1\42\1\61\1\14\1\17\1\55\1\57\1\50\1\24\1\54\1\30\1\56\1\47"+
    "\1\51\1\20\1\24\1\26\1\31\1\25\1\12\1\52\1\53\1\7\1\37\1\24\1\43\1\74\1\44"+
    "\1\71\6\1\1\0\32\1\1\0\337\1\1\0\177\1\13\0\35\1\2\0\5\1\1\0\57\1\1\0\40\1");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\1\1\3\1\4\1\5\1\6"+
    "\1\7\1\6\1\7\1\10\1\7\1\11\2\7\1\12"+
    "\5\7\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\7\1\22\1\23\1\24\1\25\6\7\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\2\1\1\36"+
    "\1\37\1\40\1\41\1\0\1\6\1\0\1\42\2\0"+
    "\1\43\1\44\1\0\4\7\1\45\2\7\1\46\20\7"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\2\7\1\55"+
    "\13\7\1\56\1\57\1\60\1\61\1\0\1\40\1\62"+
    "\1\0\1\6\1\0\1\44\1\0\1\44\1\7\1\63"+
    "\4\7\1\64\1\65\1\7\1\66\7\7\1\67\10\7"+
    "\1\70\1\7\1\71\10\7\2\0\1\6\1\72\1\0"+
    "\1\7\1\73\7\7\1\74\1\75\3\7\1\76\5\7"+
    "\1\77\1\7\1\100\1\101\1\102\11\7\1\103\1\40"+
    "\1\62\1\0\1\72\4\7\1\104\5\7\1\105\7\7"+
    "\1\106\5\7\1\107\1\7\1\72\1\7\1\110\5\7"+
    "\1\111\1\112\1\113\3\7\1\114\2\7\1\115\1\116"+
    "\1\117\1\120\1\121\1\122\1\123\1\124\1\125\3\7"+
    "\1\126\3\7\1\127\2\7\1\130\1\131\2\7\1\132"+
    "\1\133\1\134\1\135\5\7\1\136\16\7\1\137\5\7"+
    "\1\140\1\7\1\141\1\142\2\7\1\143\1\144\12\7"+
    "\1\145\3\7\1\146\1\7\1\147\31\7\1\150\1\151"+
    "\12\7\1\152\1\153\1\154\1\155\1\7\1\156\2\7"+
    "\1\157\23\7\1\160\1\7\1\161\2\7\1\162\1\163"+
    "\5\7\1\164";

  private static int [] zzUnpackAction() {
    int [] result = new int[401];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\77\0\176\0\275\0\374\0\u013b\0\275\0\u017a"+
    "\0\u01b9\0\u01f8\0\u0237\0\u0276\0\u02b5\0\u02f4\0\u0333\0\u0372"+
    "\0\u03b1\0\u01f8\0\u03f0\0\u042f\0\u046e\0\u04ad\0\u04ec\0\u052b"+
    "\0\275\0\u056a\0\275\0\275\0\u05a9\0\u05e8\0\u0627\0\275"+
    "\0\275\0\275\0\275\0\u0666\0\u06a5\0\u06e4\0\u0723\0\u0762"+
    "\0\u07a1\0\u07e0\0\275\0\u081f\0\275\0\u085e\0\275\0\u089d"+
    "\0\275\0\u08dc\0\u091b\0\u095a\0\u0999\0\u09d8\0\275\0\u0a17"+
    "\0\u0a56\0\u02b5\0\275\0\u0a95\0\u0ad4\0\275\0\u0b13\0\u0b52"+
    "\0\u0b91\0\u0bd0\0\u0c0f\0\u0c4e\0\275\0\u0c8d\0\u0ccc\0\u01f8"+
    "\0\u0d0b\0\u0d4a\0\u0d89\0\u0dc8\0\u0e07\0\u0e46\0\u0e85\0\u0ec4"+
    "\0\u0f03\0\u0f42\0\u0f81\0\u0fc0\0\u0fff\0\u103e\0\u107d\0\u10bc"+
    "\0\275\0\275\0\275\0\275\0\275\0\275\0\u10fb\0\u113a"+
    "\0\u01f8\0\u1179\0\u11b8\0\u11f7\0\u1236\0\u1275\0\u12b4\0\u12f3"+
    "\0\u1332\0\u1371\0\u13b0\0\u13ef\0\275\0\275\0\275\0\275"+
    "\0\u142e\0\u146d\0\u14ac\0\u14eb\0\u152a\0\u1569\0\275\0\u15a8"+
    "\0\u15e7\0\u1626\0\u01f8\0\u1665\0\u16a4\0\u16e3\0\u1722\0\u01f8"+
    "\0\u01f8\0\u1761\0\u01f8\0\u17a0\0\u17df\0\u181e\0\u185d\0\u189c"+
    "\0\u18db\0\u191a\0\u01f8\0\u1959\0\u1998\0\u19d7\0\u1a16\0\u1a55"+
    "\0\u1a94\0\u1ad3\0\u1b12\0\u01f8\0\u1b51\0\u01f8\0\u1b90\0\u1bcf"+
    "\0\u1c0e\0\u1c4d\0\u1c8c\0\u1ccb\0\u1d0a\0\u1d49\0\u1d88\0\u1dc7"+
    "\0\u1e06\0\u1e45\0\u1e84\0\u1ec3\0\u01f8\0\u1f02\0\u1f41\0\u1f80"+
    "\0\u1fbf\0\u1ffe\0\u203d\0\u207c\0\u01f8\0\u01f8\0\u20bb\0\u20fa"+
    "\0\u2139\0\u01f8\0\u2178\0\u21b7\0\u21f6\0\u2235\0\u2274\0\u01f8"+
    "\0\u22b3\0\u01f8\0\u01f8\0\u01f8\0\u22f2\0\u2331\0\u2370\0\u23af"+
    "\0\u23ee\0\u242d\0\u246c\0\u24ab\0\u24ea\0\u01f8\0\275\0\275"+
    "\0\u2529\0\u2568\0\u25a7\0\u25e6\0\u2625\0\u2664\0\u01f8\0\u26a3"+
    "\0\u26e2\0\u2721\0\u2760\0\u279f\0\u01f8\0\u27de\0\u281d\0\u285c"+
    "\0\u289b\0\u28da\0\u2919\0\u2958\0\u01f8\0\u2997\0\u29d6\0\u2a15"+
    "\0\u2a54\0\u2a93\0\u01f8\0\u2ad2\0\275\0\u2b11\0\u01f8\0\u2b50"+
    "\0\u2b8f\0\u2bce\0\u2c0d\0\u2c4c\0\u01f8\0\u01f8\0\u01f8\0\u2c8b"+
    "\0\u2cca\0\u2d09\0\u01f8\0\u2d48\0\u2d87\0\u01f8\0\u01f8\0\u01f8"+
    "\0\u01f8\0\u01f8\0\u01f8\0\u01f8\0\u01f8\0\u01f8\0\u2dc6\0\u2e05"+
    "\0\u2e44\0\u01f8\0\u2e83\0\u2ec2\0\u2f01\0\u01f8\0\u2f40\0\u2f7f"+
    "\0\u01f8\0\u2fbe\0\u2ffd\0\u303c\0\u01f8\0\u01f8\0\u01f8\0\u01f8"+
    "\0\u307b\0\u30ba\0\u30f9\0\u3138\0\u3177\0\u01f8\0\u31b6\0\u31f5"+
    "\0\u3234\0\u3273\0\u32b2\0\u32f1\0\u3330\0\u336f\0\u33ae\0\u33ed"+
    "\0\u342c\0\u346b\0\u34aa\0\u34e9\0\u01f8\0\u3528\0\u3567\0\u35a6"+
    "\0\u35e5\0\u3624\0\u01f8\0\u3663\0\u36a2\0\u01f8\0\u36e1\0\u3720"+
    "\0\u01f8\0\u01f8\0\u375f\0\u379e\0\u37dd\0\u381c\0\u385b\0\u389a"+
    "\0\u38d9\0\u3918\0\u3957\0\u3996\0\u39d5\0\u3a14\0\u3a53\0\u3a92"+
    "\0\u01f8\0\u3ad1\0\u01f8\0\u3b10\0\u3b4f\0\u3b8e\0\u3bcd\0\u3c0c"+
    "\0\u3c4b\0\u3c8a\0\u3cc9\0\u3d08\0\u3d47\0\u3d86\0\u3dc5\0\u3e04"+
    "\0\u3e43\0\u3e82\0\u3ec1\0\u3f00\0\u3f3f\0\u3f7e\0\u3fbd\0\u3ffc"+
    "\0\u403b\0\u407a\0\u40b9\0\u40f8\0\u4137\0\u01f8\0\u4176\0\u41b5"+
    "\0\u41f4\0\u4233\0\u4272\0\u42b1\0\u42f0\0\u432f\0\u436e\0\u43ad"+
    "\0\u01f8\0\u43ec\0\u01f8\0\u01f8\0\u442b\0\u446a\0\u44a9\0\u44e8"+
    "\0\u01f8\0\u4527\0\u4566\0\u45a5\0\u45e4\0\u4623\0\u4662\0\u46a1"+
    "\0\u46e0\0\u471f\0\u475e\0\u479d\0\u47dc\0\u481b\0\u485a\0\u4899"+
    "\0\u48d8\0\u4917\0\u4956\0\u4995\0\u01f8\0\u49d4\0\u01f8\0\u4a13"+
    "\0\u4a52\0\u01f8\0\u01f8\0\u4a91\0\u4ad0\0\u4b0f\0\u4b4e\0\u4b8d"+
    "\0\u01f8";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[401];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\7\1\10\1\11\2\12"+
    "\1\13\1\14\1\15\1\16\1\12\1\17\1\20\1\21"+
    "\1\12\1\4\1\22\1\12\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\12\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\12\1\44"+
    "\1\12\1\45\1\46\2\12\1\47\1\12\1\13\1\50"+
    "\2\13\1\51\1\52\1\13\1\53\1\54\1\55\1\56"+
    "\1\57\1\60\1\61\1\12\1\62\1\4\1\63\1\6"+
    "\1\7\1\10\1\11\2\12\1\13\1\14\1\15\1\16"+
    "\1\12\1\17\1\20\1\21\1\12\1\64\1\22\1\12"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\12\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\12\1\44\1\12\1\45\1\46\2\12"+
    "\1\47\1\12\1\13\1\50\2\13\1\51\1\52\1\13"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\12"+
    "\1\3\177\0\1\5\77\0\1\65\1\66\77\0\1\67"+
    "\1\70\2\0\1\71\1\0\1\72\25\0\1\73\16\0"+
    "\1\71\1\0\2\71\2\0\1\71\16\0\1\74\1\75"+
    "\1\0\1\74\1\76\1\77\2\100\42\0\1\74\1\0"+
    "\2\74\2\0\1\74\16\0\5\12\1\0\2\12\1\0"+
    "\3\12\1\0\7\12\5\0\1\12\2\0\1\12\4\0"+
    "\16\12\1\0\1\12\7\0\1\12\6\0\1\13\2\0"+
    "\1\13\1\76\1\77\2\100\42\0\1\13\1\0\2\13"+
    "\2\0\1\13\16\0\5\12\1\0\2\12\1\0\3\12"+
    "\1\0\7\12\5\0\1\12\2\0\1\12\4\0\1\101"+
    "\13\12\1\102\1\12\1\0\1\12\7\0\1\12\6\0"+
    "\1\77\2\0\1\77\46\0\1\77\1\0\2\77\2\0"+
    "\1\77\16\0\5\12\1\0\2\12\1\0\3\12\1\0"+
    "\5\12\1\103\1\12\5\0\1\12\2\0\1\12\4\0"+
    "\1\104\15\12\1\0\1\12\7\0\1\12\16\0\1\105"+
    "\66\0\4\12\1\106\1\0\2\12\1\0\3\12\1\0"+
    "\4\12\1\107\2\12\5\0\1\12\2\0\1\12\4\0"+
    "\1\110\1\12\1\111\11\12\1\112\1\12\1\0\1\12"+
    "\7\0\1\12\6\0\4\12\1\113\1\0\2\12\1\0"+
    "\3\12\1\0\2\12\1\114\1\115\3\12\5\0\1\12"+
    "\2\0\1\12\4\0\16\12\1\0\1\12\7\0\1\12"+
    "\6\0\5\12\1\0\1\116\1\12\1\0\3\12\1\0"+
    "\3\12\1\117\3\12\5\0\1\120\2\0\1\12\4\0"+
    "\16\12\1\0\1\12\7\0\1\12\6\0\5\12\1\0"+
    "\1\121\1\12\1\0\3\12\1\0\7\12\5\0\1\12"+
    "\2\0\1\12\4\0\16\12\1\0\1\12\7\0\1\12"+
    "\6\0\5\12\1\0\2\12\1\0\3\12\1\0\2\12"+
    "\1\122\1\123\3\12\5\0\1\12\2\0\1\12\4\0"+
    "\16\12\1\0\1\12\7\0\1\12\6\0\5\12\1\0"+
    "\1\124\1\12\1\0\3\12\1\0\7\12\5\0\1\12"+
    "\2\0\1\12\4\0\2\12\1\125\13\12\1\0\1\12"+
    "\7\0\1\12\6\0\5\12\1\0\2\12\1\0\3\12"+
    "\1\0\2\12\1\126\1\12\1\127\2\12\5\0\1\12"+
    "\2\0\1\12\4\0\4\12\1\130\11\12\1\0\1\12"+
    "\7\0\1\12\32\0\1\131\100\0\1\132\102\0\1\133"+
    "\24\0\1\134\52\0\1\135\23\0\1\136\17\0\5\12"+
    "\1\0\2\12\1\0\3\12\1\0\4\12\1\137\2\12"+
    "\5\0\1\12\2\0\1\12\4\0\2\12\1\140\13\12"+
    "\1\0\1\12\7\0\1\12\6\0\5\12\1\0\2\12"+
    "\1\0\1\141\2\12\1\0\7\12\5\0\1\12\2\0"+
    "\1\12\4\0\14\12\1\142\1\12\1\0\1\12\7\0"+
    "\1\12\6\0\5\12\1\0\1\143\1\12\1\0\3\12"+
    "\1\0\4\12\1\144\2\12\5\0\1\12\2\0\1\12"+
    "\4\0\16\12\1\0\1\12\7\0\1\12\6\0\5\12"+
    "\1\0\2\12\1\0\3\12\1\0\7\12\5\0\1\12"+
    "\2\0\1\12\4\0\2\12\1\145\5\12\1\146\5\12"+
    "\1\0\1\12\7\0\1\12\6\0\5\12\1\0\2\12"+
    "\1\0\3\12\1\0\4\12\1\147\2\12\5\0\1\12"+
    "\2\0\1\12\4\0\16\12\1\0\1\12\7\0\1\12"+
    "\6\0\5\12\1\0\1\150\1\12\1\0\3\12\1\0"+
    "\7\12\5\0\1\12\2\0\1\12\4\0\1\12\1\151"+
    "\14\12\1\0\1\12\7\0\1\12\6\0\5\12\1\0"+
    "\2\12\1\0\3\12\1\0\3\12\1\152\3\12\5\0"+
    "\1\12\2\0\1\12\4\0\1\12\1\153\1\154\13\12"+
    "\1\0\1\12\7\0\1\12\65\0\1\155\76\0\1\156"+
    "\103\0\1\157\100\0\1\160\2\0\1\62\1\0\1\161"+
    "\17\0\1\64\54\0\1\161\1\0\1\63\17\0\1\64"+
    "\54\0\2\64\1\0\74\64\2\65\1\0\74\65\4\162"+
    "\1\163\72\162\6\0\1\74\1\164\1\0\1\74\1\0"+
    "\1\77\2\100\42\0\1\74\1\0\2\74\2\0\1\74"+
    "\16\0\1\71\2\0\1\71\1\0\1\77\2\100\42\0"+
    "\1\71\1\0\2\71\2\0\1\71\16\0\1\74\2\0"+
    "\1\74\1\0\1\77\2\100\42\0\1\74\1\0\2\74"+
    "\2\0\1\74\16\0\1\165\1\0\2\165\1\0\1\166"+
    "\2\165\1\0\1\165\7\0\1\165\12\0\1\165\15\0"+
    "\5\165\1\0\1\165\7\0\1\165\6\0\1\77\2\0"+
    "\1\77\2\0\2\100\1\0\1\167\40\0\1\77\1\0"+
    "\2\77\2\0\1\77\15\0\1\170\1\171\2\0\1\171"+
    "\4\0\1\170\41\0\1\171\1\0\2\171\2\0\1\171"+
    "\16\0\5\12\1\0\2\12\1\0\3\12\1\0\7\12"+
    "\5\0\1\12\2\0\1\12\4\0\1\12\1\172\14\12"+
    "\1\0\1\12\7\0\1\12\6\0\5\12\1\0\2\12"+
    "\1\0\3\12\1\0\7\12\5\0\1\12\2\0\1\12"+
    "\4\0\13\12\1\173\2\12\1\0\1\12\7\0\1\12"+
    "\6\0\5\12\1\0\2\12\1\0\3\12\1\0\6\12"+
    "\1\174\5\0\1\12\2\0\1\12\4\0\16\12\1\0"+
    "\1\12\7\0\1\12\6\0\5\12\1\0\2\12\1\0"+
    "\3\12\1\0\4\12\1\175\2\12\5\0\1\12\2\0"+
    "\1\12\4\0\16\12\1\0\1\12\7\0\1\12\6\0"+
    "\5\12\1\0\2\12\1\0\3\12\1\0\7\12\5\0"+
    "\1\12\2\0\1\12\4\0\1\176\15\12\1\0\1\12"+
    "\7\0\1\12\6\0\5\12\1\0\2\12\1\0\3\12"+
    "\1\0\5\12\1\177\1\12\5\0\1\12\2\0\1\12"+
    "\4\0\16\12\1\0\1\12\7\0\1\12\6\0\5\12"+
    "\1\0\2\12\1\0\3\12\1\0\3\12\1\200\3\12"+
    "\5\0\1\12\2\0\1\12\4\0\16\12\1\0\1\12"+
    "\7\0\1\12\6\0\5\12\1\0\2\12\1\0\3\12"+
    "\1\0\7\12\5\0\1\12\2\0\1\12\4\0\13\12"+
    "\1\201\2\12\1\0\1\12\7\0\1\12\6\0\5\12"+
    "\1\0\2\12\1\0\3\12\1\0\6\12\1\202\5\0"+
    "\1\12\2\0\1\12\4\0\16\12\1\0\1\12\7\0"+
    "\1\12\6\0\5\12\1\0\2\12\1\0\3\12\1\0"+
    "\3\12\1\203\3\12\5\0\1\12\2\0\1\12\4\0"+
    "\16\12\1\0\1\12\7\0\1\12\6\0\5\12\1\0"+
    "\2\12\1\0\3\12\1\0\7\12\5\0\1\12\2\0"+
    "\1\12\4\0\1\12\1\204\14\12\1\0\1\12\7\0"+
    "\1\12\6\0\1\12\1\205\3\12\1\0\2\12\1\0"+
    "\3\12\1\0\7\12\5\0\1\12\2\0\1\12\4\0"+
    "\16\12\1\0\1\12\7\0\1\12\6\0\4\12\1\206"+
    "\1\0\2\12\1\0\3\12\1\0\7\12\5\0\1\12"+
    "\2\0\1\12\4\0\16\12\1\0\1\12\7\0\1\12"+
    "\6\0\5\12\1\0\2\12\1\0\1\12\1\207\1\12"+
    "\1\0\7\12\5\0\1\12\2\0\1\12\4\0\16\12"+
    "\1\0\1\12\7\0\1\12\6\0\5\12\1\0\2\12"+
    "\1\0\3\12\1\0\2\12\1\210\4\12\5\0\1\12"+
    "\2\0\1\12\4\0\16\12\1\0\1\12\7\0\1\12"+
    "\6\0\5\12\1\0\2\12\1\0\3\12\1\0\7\12"+
    "\5\0\1\12\2\0\1\12\4\0\2\12\1\211\13\12"+
    "\1\0\1\12\7\0\1\12\6\0\5\12\1\0\2\12"+
    "\1\0\3\12\1\0\3\12\1\212\3\12\5\0\1\12"+
    "\2\0\1\12\4\0\16\12\1\0\1\12\7\0\1\12"+
    "\6\0\5\12\1\0\2\12\1\0\3\12\1\0\2\12"+
    "\1\213\4\12\5\0\1\12\2\0\1\12\4\0\16\12"+
    "\1\0\1\12\7\0\1\12\6\0\5\12\1\0\2\12"+
    "\1\0\3\12\1\0\7\12\5\0\1\12\2\0\1\12"+
    "\4\0\2\12\1\214\13\12\1\0\1\12\7\0\1\12"+
    "\6\0\5\12\1\0\2\12\1\0\3\12\1\0\3\12"+
    "\1\215\1\216\2\12\5\0\1\12\2\0\1\12\4\0"+
    "\2\12\1\217\13\12\1\0\1\12\7\0\1\12\6\0"+
    "\5\12\1\0\2\12\1\0\3\12\1\0\7\12\5\0"+
    "\1\12\2\0\1\12\4\0\7\12\1\220\6\12\1\0"+
    "\1\12\7\0\1\12\6\0\5\12\1\0\2\12\1\0"+
    "\3\12\1\0\7\12\5\0\1\12\2\0\1\12\4\0"+
    "\1\12\1\221\14\12\1\0\1\12\7\0\1\12\6\0"+
    "\5\12\1\0\2\12\1\0\3\12\1\0\6\12\1\222"+
    "\5\0\1\12\2\0\1\12\4\0\16\12\1\0\1\12"+
    "\7\0\1\12\6\0\5\12\1\0\2\12\1\0\3\12"+
    "\1\0\7\12\5\0\1\12\2\0\1\12\4\0\1\223"+
    "\15\12\1\0\1\12\7\0\1\12\6\0\5\12\1\0"+
    "\2\12\1\0\3\12\1\0\7\12\5\0\1\12\2\0"+
    "\1\12\4\0\13\12\1\224\2\12\1\0\1\12\7\0"+
    "\1\12\6\0\5\12\1\0\2\12\1\0\3\12\1\0"+
    "\7\12\5\0\1\12\2\0\1\225\4\0\16\12\1\0"+
    "\1\12\7\0\1\12\6\0\5\12\1\0\2\12\1\0"+
    "\3\12\1\0\3\12\1\226\3\12\5\0\1\12\2\0"+
    "\1\12\4\0\16\12\1\0\1\12\7\0\1\12\6\0"+
    "\5\12\1\0\2\12\1\0\3\12\1\0\3\12\1\227"+
    "\3\12\5\0\1\12\2\0\1\12\4\0\16\12\1\0"+
    "\1\12\7\0\1\12\6\0\5\12\1\0\2\12\1\0"+
    "\3\12\1\0\7\12\5\0\1\12\2\0\1\12\4\0"+
    "\1\12\1\230\14\12\1\0\1\12\7\0\1\12\6\0"+
    "\5\12\1\0\2\12\1\0\3\12\1\0\2\12\1\231"+
    "\4\12\5\0\1\12\2\0\1\12\4\0\16\12\1\0"+
    "\1\12\7\0\1\12\6\0\5\12\1\0\2\12\1\0"+
    "\1\232\2\12\1\0\7\12\5\0\1\12\2\0\1\12"+
    "\4\0\16\12\1\0\1\12\7\0\1\12\6\0\5\12"+
    "\1\0\2\12\1\0\3\12\1\0\6\12\1\233\5\0"+
    "\1\12\2\0\1\12\4\0\16\12\1\0\1\12\7\0"+
    "\1\12\6\0\5\12\1\0\1\234\1\12\1\0\3\12"+
    "\1\0\7\12\5\0\1\12\2\0\1\12\4\0\16\12"+
    "\1\0\1\12\7\0\1\12\6\0\5\12\1\0\2\12"+
    "\1\0\3\12\1\0\2\12\1\235\4\12\5\0\1\12"+
    "\2\0\1\12\4\0\16\12\1\0\1\12\7\0\1\12"+
    "\6\0\5\12\1\0\2\12\1\0\3\12\1\0\7\12"+
    "\5\0\1\12\2\0\1\12\4\0\2\12\1\236\13\12"+
    "\1\0\1\12\7\0\1\12\1\161\1\0\1\161\17\0"+
    "\1\64\54\0\4\162\1\237\72\162\4\163\1\240\72\163"+
    "\6\0\1\241\1\0\2\241\1\0\1\166\2\241\1\0"+
    "\1\241\7\0\1\241\12\0\1\241\15\0\5\241\1\0"+
    "\1\241\7\0\1\241\6\0\1\165\1\0\2\165\1\76"+
    "\1\242\2\165\1\0\1\165\2\243\5\0\1\165\12\0"+
    "\1\165\15\0\5\165\1\0\1\165\7\0\1\165\6\0"+
    "\1\242\1\0\2\242\2\0\2\242\1\0\1\242\7\0"+
    "\1\242\12\0\1\242\15\0\5\242\1\0\1\242\7\0"+
    "\1\242\6\0\1\171\2\0\1\171\46\0\1\171\1\0"+
    "\2\171\2\0\1\171\16\0\1\171\2\0\1\171\5\0"+
    "\1\167\40\0\1\171\1\0\2\171\2\0\1\171\16\0"+
    "\5\12\1\0\2\12\1\0\1\244\2\12\1\0\7\12"+
    "\5\0\1\12\2\0\1\12\4\0\16\12\1\0\1\12"+
    "\7\0\1\12\6\0\5\12\1\0\1\245\1\12\1\0"+
    "\3\12\1\0\7\12\5\0\1\12\2\0\1\12\4\0"+
    "\16\12\1\0\1\12\7\0\1\12\6\0\5\12\1\0"+
    "\2\12\1\0\3\12\1\0\7\12\5\0\1\12\2\0"+
    "\1\12\4\0\15\12\1\246\1\0\1\12\7\0\1\12"+
    "\6\0\5\12\1\0\2\12\1\0\3\12\1\0\7\12"+
    "\5\0\1\12\2\0\1\247\4\0\16\12\1\0\1\12"+
    "\7\0\1\12\6\0\5\12\1\0\2\12\1\0\3\12"+
    "\1\0\5\12\1\250\1\251\5\0\1\12\2\0\1\12"+
    "\4\0\16\12\1\0\1\12\7\0\1\12\6\0\5\12"+
    "\1\0\2\12\1\0\3\12\1\0\7\12\5\0\1\12"+
    "\2\0\1\12\4\0\10\12\1\252\5\12\1\0\1\12"+
    "\7\0\1\12\6\0\5\12\1\0\2\12\1\0\3\12"+
    "\1\0\7\12\5\0\1\12\2\0\1\12\4\0\3\12"+
    "\1\253\12\12\1\0\1\12\7\0\1\12\6\0\5\12"+
    "\1\0\2\12\1\0\3\12\1\0\2\12\1\254\4\12"+
    "\5\0\1\12\2\0\1\12\4\0\16\12\1\0\1\12"+
    "\7\0\1\12\6\0\5\12\1\0\1\255\1\12\1\0"+
    "\3\12\1\0\7\12\5\0\1\12\2\0\1\12\4\0"+
    "\16\12\1\0\1\12\7\0\1\12\6\0\5\12\1\0"+
    "\1\256\1\12\1\0\3\12\1\0\7\12\5\0\1\12"+
    "\2\0\1\12\4\0\16\12\1\0\1\12\7\0\1\12"+
    "\6\0\4\12\1\257\1\0\2\12\1\0\3\12\1\0"+
    "\7\12\5\0\1\12\2\0\1\12\4\0\16\12\1\0"+
    "\1\12\7\0\1\12\6\0\5\12\1\0\2\12\1\0"+
    "\3\12\1\0\7\12\5\0\1\12\2\0\1\12\4\0"+
    "\7\12\1\260\6\12\1\0\1\12\7\0\1\12\6\0"+
    "\5\12\1\0\2\12\1\0\3\12\1\0\4\12\1\261"+
    "\2\12\5\0\1\12\2\0\1\12\4\0\16\12\1\0"+
    "\1\12\7\0\1\12\6\0\5\12\1\0\2\12\1\0"+
    "\1\12\1\262\1\12\1\0\7\12\5\0\1\12\2\0"+
    "\1\12\4\0\16\12\1\0\1\12\7\0\1\12\6\0"+
    "\4\12\1\263\1\0\2\12\1\0\3\12\1\0\7\12"+
    "\5\0\1\12\2\0\1\12\4\0\16\12\1\0\1\12"+
    "\7\0\1\12\6\0\5\12\1\0\2\12\1\0\3\12"+
    "\1\0\2\12\1\264\4\12\5\0\1\12\2\0\1\12"+
    "\4\0\16\12\1\0\1\12\7\0\1\12\6\0\5\12"+
    "\1\0\2\12\1\0\3\12\1\0\3\12\1\265\3\12"+
    "\5\0\1\12\2\0\1\12\4\0\16\12\1\0\1\12"+
    "\7\0\1\12\6\0\5\12\1\0\2\12\1\0\1\12"+
    "\1\266\1\12\1\0\7\12\5\0\1\12\2\0\1\12"+
    "\4\0\16\12\1\0\1\12\7\0\1\12\6\0\5\12"+
    "\1\0\2\12\1\0\3\12\1\0\2\12\1\267\4\12"+
    "\5\0\1\12\2\0\1\12\4\0\16\12\1\0\1\12"+
    "\7\0\1\12\6\0\5\12\1\0\1\270\1\12\1\0"+
    "\3\12\1\0\7\12\5\0\1\12\2\0\1\12\4\0"+
    "\16\12\1\0\1\12\7\0\1\12\6\0\5\12\1\0"+
    "\2\12\1\0\3\12\1\0\2\12\1\271\4\12\5\0"+
    "\1\12\2\0\1\12\4\0\16\12\1\0\1\12\7\0"+
    "\1\12\6\0\5\12\1\0\2\12\1\0\3\12\1\0"+
    "\7\12\5\0\1\12\2\0\1\12\4\0\13\12\1\272"+
    "\1\273\1\12\1\0\1\274\7\0\1\12\6\0\5\12"+
    "\1\0\2\12\1\0\3\12\1\0\7\12\5\0\1\12"+
    "\2\0\1\12\4\0\5\12\1\275\10\12\1\0\1\12"+
    "\7\0\1\12\6\0\5\12\1\0\2\12\1\0\3\12"+
    "\1\0\5\12\1\276\1\12\5\0\1\12\2\0\1\12"+
    "\4\0\16\12\1\0\1\12\7\0\1\12\6\0\5\12"+
    "\1\0\2\12\1\0\3\12\1\0\7\12\5\0\1\12"+
    "\2\0\1\12\4\0\13\12\1\277\1\300\1\12\1\0"+
    "\1\301\7\0\1\12\6\0\5\12\1\0\2\12\1\0"+
    "\3\12\1\0\4\12\1\302\2\12\5\0\1\12\2\0"+
    "\1\12\4\0\16\12\1\0\1\12\7\0\1\12\6\0"+
    "\5\12\1\0\2\12\1\0\3\12\1\0\7\12\5\0"+
    "\1\12\2\0\1\303\4\0\16\12\1\0\1\12\7\0"+
    "\1\12\6\0\5\12\1\0\2\12\1\0\3\12\1\0"+
    "\4\12\1\304\2\12\5\0\1\12\2\0\1\12\4\0"+
    "\16\12\1\0\1\12\7\0\1\12\6\0\5\12\1\0"+
    "\2\12\1\0\3\12\1\0\7\12\5\0\1\12\2\0"+
    "\1\305\4\0\16\12\1\0\1\12\7\0\1\12\6\0"+
    "\5\12\1\0\2\12\1\0\3\12\1\0\5\12\1\306"+
    "\1\12\5\0\1\12\2\0\1\12\4\0\16\12\1\0"+
    "\1\12\7\0\1\12\3\162\1\307\1\237\72\162\3\163"+
    "\1\310\1\240\72\163\6\0\1\241\1\0\2\241\1\0"+
    "\1\242\2\241\1\0\1\241\2\243\5\0\1\241\12\0"+
    "\1\241\15\0\5\241\1\0\1\241\7\0\1\241\6\0"+
    "\1\242\1\0\2\242\2\0\2\242\1\0\1\242\2\243"+
    "\5\0\1\242\12\0\1\242\15\0\5\242\1\0\1\242"+
    "\7\0\1\242\5\0\1\311\1\312\2\0\1\312\4\0"+
    "\1\311\41\0\1\312\1\0\2\312\2\0\1\312\16\0"+
    "\5\12\1\0\2\12\1\0\3\12\1\0\7\12\5\0"+
    "\1\12\2\0\1\12\4\0\2\12\1\313\13\12\1\0"+
    "\1\12\7\0\1\12\6\0\5\12\1\0\2\12\1\0"+
    "\3\12\1\0\5\12\1\314\1\12\5\0\1\12\2\0"+
    "\1\12\4\0\16\12\1\0\1\12\7\0\1\12\6\0"+
    "\5\12\1\0\2\12\1\0\3\12\1\0\2\12\1\315"+
    "\4\12\5\0\1\12\2\0\1\12\4\0\16\12\1\0"+
    "\1\12\7\0\1\12\6\0\5\12\1\0\2\12\1\0"+
    "\3\12\1\0\2\12\1\316\4\12\5\0\1\12\2\0"+
    "\1\12\4\0\16\12\1\0\1\12\7\0\1\12\6\0"+
    "\5\12\1\0\1\317\1\12\1\0\3\12\1\0\7\12"+
    "\5\0\1\12\2\0\1\12\4\0\16\12\1\0\1\12"+
    "\7\0\1\12\6\0\5\12\1\0\2\12\1\0\3\12"+
    "\1\0\1\320\6\12\5\0\1\12\2\0\1\12\4\0"+
    "\16\12\1\0\1\12\7\0\1\12\6\0\5\12\1\0"+
    "\2\12\1\0\3\12\1\0\4\12\1\321\2\12\5\0"+
    "\1\12\2\0\1\12\4\0\16\12\1\0\1\12\7\0"+
    "\1\12\6\0\4\12\1\322\1\0\2\12\1\0\3\12"+
    "\1\0\7\12\5\0\1\12\2\0\1\12\4\0\16\12"+
    "\1\0\1\12\7\0\1\12\6\0\5\12\1\0\2\12"+
    "\1\0\3\12\1\0\3\12\1\323\3\12\5\0\1\12"+
    "\2\0\1\12\4\0\16\12\1\0\1\12\7\0\1\12"+
    "\6\0\5\12\1\0\2\12\1\0\3\12\1\0\7\12"+
    "\5\0\1\12\2\0\1\12\4\0\1\12\1\324\14\12"+
    "\1\0\1\12\7\0\1\12\6\0\5\12\1\0\2\12"+
    "\1\0\3\12\1\0\7\12\5\0\1\325\2\0\1\12"+
    "\4\0\16\12\1\0\1\12\7\0\1\12\6\0\5\12"+
    "\1\0\2\12\1\0\3\12\1\0\7\12\5\0\1\12"+
    "\2\0\1\326\4\0\16\12\1\0\1\12\7\0\1\12"+
    "\6\0\5\12\1\0\2\12\1\0\3\12\1\0\7\12"+
    "\5\0\1\12\2\0\1\12\4\0\1\12\1\327\14\12"+
    "\1\0\1\12\7\0\1\12\6\0\5\12\1\0\2\12"+
    "\1\0\3\12\1\0\4\12\1\330\2\12\5\0\1\12"+
    "\2\0\1\12\4\0\16\12\1\0\1\12\7\0\1\12"+
    "\6\0\5\12\1\0\2\12\1\0\3\12\1\0\5\12"+
    "\1\331\1\12\5\0\1\12\2\0\1\12\4\0\16\12"+
    "\1\0\1\12\7\0\1\12\6\0\5\12\1\0\2\12"+
    "\1\0\3\12\1\0\7\12\5\0\1\12\2\0\1\332"+
    "\4\0\16\12\1\0\1\12\7\0\1\12\6\0\5\12"+
    "\1\0\2\12\1\0\3\12\1\0\7\12\5\0\1\12"+
    "\2\0\1\12\4\0\1\12\1\333\14\12\1\0\1\12"+
    "\7\0\1\12\6\0\5\12\1\0\2\12\1\0\3\12"+
    "\1\0\7\12\5\0\1\12\2\0\1\12\4\0\6\12"+
    "\1\334\7\12\1\0\1\12\7\0\1\12\6\0\5\12"+
    "\1\0\1\335\1\12\1\0\3\12\1\0\7\12\5\0"+
    "\1\12\2\0\1\12\4\0\16\12\1\0\1\12\7\0"+
    "\1\12\6\0\1\12\1\336\3\12\1\0\2\12\1\0"+
    "\3\12\1\0\7\12\5\0\1\12\2\0\1\12\4\0"+
    "\16\12\1\0\1\12\7\0\1\12\6\0\1\12\1\337"+
    "\3\12\1\0\2\12\1\0\3\12\1\0\7\12\5\0"+
    "\1\12\2\0\1\12\4\0\16\12\1\0\1\12\7\0"+
    "\1\12\6\0\1\12\1\340\3\12\1\0\2\12\1\0"+
    "\3\12\1\0\7\12\5\0\1\12\2\0\1\12\4\0"+
    "\16\12\1\0\1\12\7\0\1\12\6\0\4\12\1\341"+
    "\1\0\2\12\1\0\3\12\1\0\7\12\5\0\1\12"+
    "\2\0\1\12\4\0\16\12\1\0\1\12\7\0\1\12"+
    "\6\0\5\12\1\0\2\12\1\0\3\12\1\0\4\12"+
    "\1\342\2\12\5\0\1\12\2\0\1\12\4\0\16\12"+
    "\1\0\1\12\7\0\1\12\6\0\5\12\1\0\2\12"+
    "\1\0\3\12\1\0\7\12\5\0\1\12\2\0\1\12"+
    "\4\0\5\12\1\343\10\12\1\0\1\12\7\0\1\12"+
    "\6\0\5\12\1\0\2\12\1\0\3\12\1\0\4\12"+
    "\1\344\2\12\5\0\1\12\2\0\1\12\4\0\16\12"+
    "\1\0\1\12\7\0\1\12\6\0\1\312\2\0\1\312"+
    "\46\0\1\312\1\0\2\312\2\0\1\312\16\0\1\312"+
    "\2\0\1\312\5\0\1\345\40\0\1\312\1\0\2\312"+
    "\2\0\1\312\16\0\5\12\1\0\2\12\1\0\3\12"+
    "\1\0\3\12\1\346\3\12\5\0\1\12\2\0\1\12"+
    "\4\0\16\12\1\0\1\12\7\0\1\12\6\0\5\12"+
    "\1\0\1\347\1\12\1\0\3\12\1\0\7\12\5\0"+
    "\1\12\2\0\1\12\4\0\16\12\1\0\1\12\7\0"+
    "\1\12\6\0\5\12\1\0\2\12\1\0\3\12\1\0"+
    "\7\12\5\0\1\12\2\0\1\12\4\0\1\12\1\350"+
    "\14\12\1\0\1\12\7\0\1\12\6\0\5\12\1\0"+
    "\2\12\1\0\3\12\1\0\7\12\5\0\1\12\2\0"+
    "\1\12\4\0\10\12\1\351\5\12\1\0\1\12\7\0"+
    "\1\12\6\0\5\12\1\0\2\12\1\0\3\12\1\0"+
    "\7\12\5\0\1\12\2\0\1\352\4\0\16\12\1\0"+
    "\1\12\7\0\1\12\6\0\5\12\1\0\2\12\1\0"+
    "\3\12\1\0\2\12\1\353\4\12\5\0\1\12\2\0"+
    "\1\12\4\0\16\12\1\0\1\12\7\0\1\12\6\0"+
    "\5\12\1\0\2\12\1\0\3\12\1\0\3\12\1\354"+
    "\3\12\5\0\1\12\2\0\1\12\4\0\16\12\1\0"+
    "\1\12\7\0\1\12\6\0\5\12\1\0\2\12\1\0"+
    "\3\12\1\0\7\12\5\0\1\12\2\0\1\12\4\0"+
    "\1\355\15\12\1\0\1\12\7\0\1\12\6\0\5\12"+
    "\1\0\2\12\1\0\3\12\1\0\7\12\5\0\1\12"+
    "\2\0\1\356\4\0\16\12\1\0\1\12\7\0\1\12"+
    "\6\0\5\12\1\0\2\12\1\0\3\12\1\0\2\12"+
    "\1\357\4\12\5\0\1\12\2\0\1\12\4\0\16\12"+
    "\1\0\1\12\7\0\1\12\6\0\5\12\1\0\2\12"+
    "\1\0\3\12\1\0\7\12\5\0\1\12\2\0\1\360"+
    "\4\0\16\12\1\0\1\12\7\0\1\12\6\0\5\12"+
    "\1\0\2\12\1\0\3\12\1\0\7\12\5\0\1\12"+
    "\2\0\1\12\4\0\6\12\1\361\7\12\1\0\1\12"+
    "\7\0\1\12\6\0\5\12\1\0\1\362\1\12\1\0"+
    "\3\12\1\0\7\12\5\0\1\12\2\0\1\12\4\0"+
    "\16\12\1\0\1\12\7\0\1\12\6\0\5\12\1\0"+
    "\2\12\1\0\3\12\1\0\7\12\5\0\1\12\2\0"+
    "\1\12\4\0\10\12\1\363\5\12\1\0\1\12\7\0"+
    "\1\12\6\0\5\12\1\0\2\12\1\0\3\12\1\0"+
    "\7\12\5\0\1\12\2\0\1\12\4\0\1\364\15\12"+
    "\1\0\1\12\7\0\1\12\6\0\5\12\1\0\2\12"+
    "\1\0\3\12\1\0\3\12\1\365\3\12\5\0\1\12"+
    "\2\0\1\12\4\0\16\12\1\0\1\12\7\0\1\12"+
    "\6\0\5\12\1\0\2\12\1\0\3\12\1\0\7\12"+
    "\5\0\1\12\2\0\1\12\4\0\13\12\1\366\1\367"+
    "\1\12\1\0\1\370\7\0\1\12\6\0\5\12\1\0"+
    "\2\12\1\0\3\12\1\0\7\12\5\0\1\12\2\0"+
    "\1\12\4\0\13\12\1\371\1\372\1\12\1\0\1\373"+
    "\7\0\1\12\6\0\5\12\1\0\2\12\1\0\3\12"+
    "\1\0\7\12\5\0\1\12\2\0\1\12\4\0\13\12"+
    "\1\374\1\375\1\12\1\0\1\376\7\0\1\12\6\0"+
    "\5\12\1\0\2\12\1\0\3\12\1\0\5\12\1\377"+
    "\1\12\5\0\1\12\2\0\1\12\4\0\16\12\1\0"+
    "\1\12\7\0\1\12\6\0\5\12\1\0\2\12\1\0"+
    "\3\12\1\0\3\12\1\u0100\3\12\5\0\1\12\2\0"+
    "\1\12\4\0\16\12\1\0\1\12\7\0\1\12\6\0"+
    "\5\12\1\0\2\12\1\0\3\12\1\0\6\12\1\u0101"+
    "\5\0\1\12\2\0\1\12\4\0\16\12\1\0\1\12"+
    "\7\0\1\12\6\0\5\12\1\0\2\12\1\0\3\12"+
    "\1\0\7\12\5\0\1\12\2\0\1\12\4\0\7\12"+
    "\1\u0102\6\12\1\0\1\12\7\0\1\12\6\0\5\12"+
    "\1\0\2\12\1\0\3\12\1\0\7\12\5\0\1\12"+
    "\2\0\1\12\4\0\2\12\1\u0103\13\12\1\0\1\12"+
    "\7\0\1\12\6\0\5\12\1\0\2\12\1\0\3\12"+
    "\1\0\3\12\1\u0104\3\12\5\0\1\12\2\0\1\12"+
    "\4\0\16\12\1\0\1\12\7\0\1\12\6\0\5\12"+
    "\1\0\2\12\1\0\3\12\1\0\7\12\5\0\1\12"+
    "\2\0\1\12\4\0\2\12\1\u0105\13\12\1\0\1\12"+
    "\7\0\1\12\6\0\5\12\1\0\1\u0106\1\12\1\0"+
    "\3\12\1\0\7\12\5\0\1\12\2\0\1\12\4\0"+
    "\16\12\1\0\1\12\7\0\1\12\6\0\5\12\1\0"+
    "\1\u0107\1\12\1\0\3\12\1\0\7\12\5\0\1\12"+
    "\2\0\1\12\4\0\16\12\1\0\1\12\7\0\1\12"+
    "\6\0\5\12\1\0\2\12\1\0\3\12\1\0\7\12"+
    "\5\0\1\12\2\0\1\12\4\0\16\12\1\0\1\12"+
    "\7\0\1\u0108\6\0\5\12\1\0\1\u0109\1\12\1\0"+
    "\3\12\1\0\7\12\5\0\1\12\2\0\1\12\4\0"+
    "\16\12\1\0\1\12\7\0\1\12\6\0\5\12\1\0"+
    "\2\12\1\0\3\12\1\0\3\12\1\u010a\3\12\5\0"+
    "\1\12\2\0\1\12\4\0\16\12\1\0\1\12\7\0"+
    "\1\12\6\0\4\12\1\u010b\1\0\2\12\1\0\3\12"+
    "\1\0\7\12\5\0\1\12\2\0\1\12\4\0\16\12"+
    "\1\0\1\12\7\0\1\12\6\0\5\12\1\0\2\12"+
    "\1\0\3\12\1\0\7\12\5\0\1\12\2\0\1\12"+
    "\4\0\2\12\1\u010c\13\12\1\0\1\12\7\0\1\12"+
    "\6\0\5\12\1\0\2\12\1\0\3\12\1\0\2\12"+
    "\1\u010d\4\12\5\0\1\12\2\0\1\12\4\0\16\12"+
    "\1\0\1\12\7\0\1\12\6\0\5\12\1\0\2\12"+
    "\1\0\3\12\1\0\7\12\5\0\1\12\2\0\1\12"+
    "\4\0\12\12\1\u010e\3\12\1\0\1\12\7\0\1\12"+
    "\6\0\5\12\1\0\2\12\1\0\3\12\1\0\2\12"+
    "\1\u010f\4\12\5\0\1\12\2\0\1\12\4\0\16\12"+
    "\1\0\1\12\7\0\1\12\6\0\5\12\1\0\2\12"+
    "\1\0\3\12\1\0\7\12\5\0\1\12\2\0\1\12"+
    "\4\0\1\u0110\15\12\1\0\1\12\7\0\1\12\6\0"+
    "\5\12\1\0\2\12\1\0\3\12\1\0\7\12\5\0"+
    "\1\12\2\0\1\12\4\0\2\12\1\u0111\13\12\1\0"+
    "\1\12\7\0\1\12\6\0\5\12\1\0\2\12\1\0"+
    "\3\12\1\0\7\12\5\0\1\12\2\0\1\12\4\0"+
    "\1\u0112\15\12\1\0\1\12\7\0\1\12\6\0\5\12"+
    "\1\0\2\12\1\0\3\12\1\0\1\u0113\6\12\5\0"+
    "\1\12\2\0\1\12\4\0\16\12\1\0\1\12\7\0"+
    "\1\12\6\0\5\12\1\0\2\12\1\0\3\12\1\0"+
    "\6\12\1\u0114\5\0\1\12\2\0\1\12\4\0\16\12"+
    "\1\0\1\12\7\0\1\12\6\0\5\12\1\0\2\12"+
    "\1\0\3\12\1\0\1\u0115\6\12\5\0\1\12\2\0"+
    "\1\12\4\0\16\12\1\0\1\12\7\0\1\12\6\0"+
    "\5\12\1\0\1\u0116\1\12\1\0\3\12\1\0\7\12"+
    "\5\0\1\12\2\0\1\12\4\0\1\12\1\u0117\14\12"+
    "\1\0\1\12\7\0\1\12\6\0\4\12\1\u0118\1\0"+
    "\2\12\1\0\3\12\1\0\7\12\5\0\1\12\2\0"+
    "\1\12\4\0\16\12\1\0\1\12\7\0\1\12\6\0"+
    "\4\12\1\u0119\1\0\2\12\1\0\3\12\1\0\7\12"+
    "\5\0\1\12\2\0\1\12\4\0\16\12\1\0\1\12"+
    "\7\0\1\12\6\0\5\12\1\0\2\12\1\0\3\12"+
    "\1\0\6\12\1\u011a\5\0\1\12\2\0\1\12\4\0"+
    "\16\12\1\0\1\12\7\0\1\12\6\0\5\12\1\0"+
    "\2\12\1\0\3\12\1\0\6\12\1\u011b\5\0\1\12"+
    "\2\0\1\u011c\4\0\7\12\1\u011d\1\12\1\u011e\1\u011f"+
    "\1\u0120\1\u0121\1\12\1\0\1\12\7\0\1\12\6\0"+
    "\5\12\1\0\2\12\1\0\3\12\1\0\6\12\1\u0122"+
    "\5\0\1\12\2\0\1\12\4\0\16\12\1\0\1\12"+
    "\7\0\1\12\6\0\5\12\1\0\2\12\1\0\3\12"+
    "\1\0\7\12\5\0\1\12\2\0\1\u0123\4\0\16\12"+
    "\1\0\1\12\7\0\1\12\6\0\5\12\1\0\2\12"+
    "\1\0\3\12\1\0\7\12\5\0\1\12\2\0\1\12"+
    "\4\0\1\u0124\15\12\1\0\1\12\7\0\1\12\6\0"+
    "\5\12\1\0\2\12\1\0\1\12\1\u0125\1\12\1\0"+
    "\7\12\5\0\1\12\2\0\1\12\4\0\16\12\1\0"+
    "\1\12\7\0\1\12\6\0\5\12\1\0\2\12\1\0"+
    "\3\12\1\0\7\12\5\0\1\12\2\0\1\12\4\0"+
    "\6\12\1\u0126\7\12\1\0\1\12\7\0\1\12\6\0"+
    "\5\12\1\0\2\12\1\0\3\12\1\0\2\12\1\u0127"+
    "\4\12\5\0\1\12\2\0\1\12\4\0\16\12\1\0"+
    "\1\12\7\0\1\12\6\0\5\12\1\0\2\12\1\0"+
    "\3\12\1\0\2\12\1\u0128\4\12\5\0\1\12\2\0"+
    "\1\12\4\0\16\12\1\0\1\12\7\0\1\12\6\0"+
    "\4\12\1\u0129\1\0\2\12\1\0\3\12\1\0\7\12"+
    "\5\0\1\12\2\0\1\12\4\0\16\12\1\0\1\12"+
    "\7\0\1\12\6\0\4\12\1\u012a\1\0\2\12\1\0"+
    "\3\12\1\0\7\12\5\0\1\12\2\0\1\12\4\0"+
    "\16\12\1\0\1\12\7\0\1\12\6\0\5\12\1\0"+
    "\2\12\1\0\3\12\1\0\7\12\5\0\1\12\2\0"+
    "\1\12\4\0\12\12\1\u012b\3\12\1\0\1\12\7\0"+
    "\1\12\6\0\5\12\1\0\1\u012c\1\12\1\0\3\12"+
    "\1\0\7\12\5\0\1\12\2\0\1\12\4\0\16\12"+
    "\1\0\1\12\7\0\1\12\6\0\5\12\1\0\2\12"+
    "\1\0\3\12\1\0\7\12\5\0\1\12\2\0\1\12"+
    "\4\0\12\12\1\u012d\3\12\1\0\1\12\7\0\1\12"+
    "\6\0\5\12\1\0\2\12\1\0\3\12\1\0\7\12"+
    "\5\0\1\12\2\0\1\12\4\0\12\12\1\u012e\3\12"+
    "\1\0\1\12\7\0\1\12\6\0\5\12\1\0\1\u012f"+
    "\1\12\1\0\3\12\1\0\7\12\5\0\1\12\2\0"+
    "\1\12\4\0\16\12\1\0\1\12\7\0\1\12\6\0"+
    "\5\12\1\0\2\12\1\0\3\12\1\0\7\12\5\0"+
    "\1\12\2\0\1\12\4\0\2\12\1\u0130\13\12\1\0"+
    "\1\12\7\0\1\12\6\0\5\12\1\0\2\12\1\0"+
    "\3\12\1\0\7\12\5\0\1\12\2\0\1\12\4\0"+
    "\6\12\1\u0131\7\12\1\0\1\12\7\0\1\12\6\0"+
    "\5\12\1\0\2\12\1\0\3\12\1\0\7\12\5\0"+
    "\1\12\2\0\1\12\4\0\10\12\1\u0132\5\12\1\0"+
    "\1\12\7\0\1\12\6\0\5\12\1\0\2\12\1\0"+
    "\3\12\1\0\4\12\1\u0133\2\12\5\0\1\12\2\0"+
    "\1\12\4\0\16\12\1\0\1\12\7\0\1\12\6\0"+
    "\5\12\1\0\2\12\1\0\3\12\1\0\7\12\5\0"+
    "\1\12\2\0\1\12\4\0\2\12\1\u0134\13\12\1\0"+
    "\1\12\7\0\1\12\6\0\5\12\1\0\2\12\1\0"+
    "\3\12\1\0\7\12\5\0\1\12\2\0\1\12\4\0"+
    "\15\12\1\u0135\1\0\1\12\7\0\1\12\6\0\5\12"+
    "\1\0\2\12\1\0\3\12\1\0\5\12\1\u0136\1\12"+
    "\5\0\1\12\2\0\1\12\4\0\16\12\1\0\1\12"+
    "\7\0\1\12\6\0\5\12\1\0\2\12\1\0\1\12"+
    "\1\u0137\1\12\1\0\7\12\5\0\1\12\2\0\1\12"+
    "\4\0\16\12\1\0\1\12\7\0\1\12\6\0\5\12"+
    "\1\0\2\12\1\0\3\12\1\0\1\u0138\6\12\5\0"+
    "\1\12\2\0\1\12\4\0\16\12\1\0\1\12\7\0"+
    "\1\12\6\0\5\12\1\0\2\12\1\0\3\12\1\0"+
    "\3\12\1\u0139\3\12\5\0\1\12\2\0\1\12\4\0"+
    "\16\12\1\0\1\12\7\0\1\12\6\0\5\12\1\0"+
    "\2\12\1\0\3\12\1\0\7\12\5\0\1\12\2\0"+
    "\1\12\4\0\7\12\1\u013a\6\12\1\0\1\12\7\0"+
    "\1\12\6\0\5\12\1\0\2\12\1\0\3\12\1\0"+
    "\7\12\5\0\1\12\2\0\1\12\4\0\1\u013b\15\12"+
    "\1\0\1\12\7\0\1\12\6\0\5\12\1\0\2\12"+
    "\1\0\3\12\1\0\3\12\1\u013c\3\12\5\0\1\12"+
    "\2\0\1\12\4\0\16\12\1\0\1\12\7\0\1\12"+
    "\6\0\5\12\1\0\1\u013d\1\12\1\0\3\12\1\0"+
    "\7\12\5\0\1\12\2\0\1\12\4\0\16\12\1\0"+
    "\1\12\7\0\1\12\6\0\5\12\1\0\2\12\1\0"+
    "\3\12\1\0\2\12\1\u013e\4\12\5\0\1\12\2\0"+
    "\1\12\4\0\16\12\1\0\1\12\7\0\1\12\6\0"+
    "\5\12\1\0\2\12\1\0\3\12\1\0\2\12\1\u013f"+
    "\4\12\5\0\1\12\2\0\1\12\4\0\16\12\1\0"+
    "\1\12\7\0\1\12\6\0\5\12\1\0\2\12\1\0"+
    "\3\12\1\0\4\12\1\u0140\2\12\5\0\1\12\2\0"+
    "\1\12\4\0\16\12\1\0\1\12\7\0\1\12\6\0"+
    "\5\12\1\0\2\12\1\0\3\12\1\0\2\12\1\u0141"+
    "\4\12\5\0\1\12\2\0\1\12\4\0\16\12\1\0"+
    "\1\12\7\0\1\12\6\0\5\12\1\0\2\12\1\0"+
    "\1\12\1\u0142\1\12\1\0\7\12\5\0\1\12\2\0"+
    "\1\12\4\0\16\12\1\0\1\12\7\0\1\12\6\0"+
    "\5\12\1\0\2\12\1\0\3\12\1\0\2\12\1\u0143"+
    "\4\12\5\0\1\12\2\0\1\12\4\0\16\12\1\0"+
    "\1\12\7\0\1\12\6\0\5\12\1\0\2\12\1\0"+
    "\3\12\1\0\4\12\1\u0144\2\12\5\0\1\12\2\0"+
    "\1\12\4\0\16\12\1\0\1\12\7\0\1\12\6\0"+
    "\5\12\1\0\2\12\1\0\3\12\1\0\1\u0145\6\12"+
    "\5\0\1\12\2\0\1\12\4\0\16\12\1\0\1\12"+
    "\7\0\1\12\6\0\5\12\1\0\2\12\1\0\3\12"+
    "\1\0\7\12\5\0\1\12\2\0\1\12\4\0\1\12"+
    "\1\u0146\14\12\1\0\1\12\7\0\1\12\6\0\5\12"+
    "\1\0\2\12\1\0\3\12\1\0\7\12\5\0\1\12"+
    "\2\0\1\12\4\0\10\12\1\u0147\5\12\1\0\1\12"+
    "\7\0\1\12\6\0\5\12\1\0\2\12\1\0\3\12"+
    "\1\0\3\12\1\u0148\3\12\5\0\1\12\2\0\1\12"+
    "\4\0\16\12\1\0\1\12\7\0\1\12\6\0\5\12"+
    "\1\0\2\12\1\0\3\12\1\0\4\12\1\u0149\2\12"+
    "\5\0\1\12\2\0\1\12\4\0\16\12\1\0\1\12"+
    "\7\0\1\12\6\0\5\12\1\0\2\12\1\0\3\12"+
    "\1\0\7\12\5\0\1\12\2\0\1\12\4\0\6\12"+
    "\1\u014a\7\12\1\0\1\12\7\0\1\12\6\0\5\12"+
    "\1\0\2\12\1\0\3\12\1\0\4\12\1\u014b\2\12"+
    "\5\0\1\12\2\0\1\12\4\0\16\12\1\0\1\12"+
    "\7\0\1\12\6\0\5\12\1\0\2\12\1\0\3\12"+
    "\1\0\6\12\1\u014c\5\0\1\12\2\0\1\12\4\0"+
    "\16\12\1\0\1\12\7\0\1\12\6\0\5\12\1\0"+
    "\2\12\1\0\3\12\1\0\1\u014d\6\12\5\0\1\12"+
    "\2\0\1\12\4\0\16\12\1\0\1\12\7\0\1\12"+
    "\6\0\5\12\1\0\2\12\1\0\3\12\1\0\3\12"+
    "\1\u014e\3\12\5\0\1\12\2\0\1\12\4\0\16\12"+
    "\1\0\1\12\7\0\1\12\6\0\5\12\1\0\2\12"+
    "\1\0\3\12\1\0\3\12\1\u014f\3\12\5\0\1\12"+
    "\2\0\1\12\4\0\16\12\1\0\1\12\7\0\1\12"+
    "\6\0\5\12\1\0\1\u0150\1\12\1\0\3\12\1\0"+
    "\7\12\5\0\1\12\2\0\1\12\4\0\16\12\1\0"+
    "\1\12\7\0\1\12\6\0\5\12\1\0\2\12\1\0"+
    "\3\12\1\0\3\12\1\u0151\3\12\5\0\1\12\2\0"+
    "\1\12\4\0\16\12\1\0\1\12\7\0\1\12\6\0"+
    "\5\12\1\0\2\12\1\0\3\12\1\0\4\12\1\u0152"+
    "\2\12\5\0\1\12\2\0\1\12\4\0\16\12\1\0"+
    "\1\12\7\0\1\12\6\0\5\12\1\0\2\12\1\0"+
    "\3\12\1\0\7\12\5\0\1\12\2\0\1\u0153\4\0"+
    "\7\12\1\u0154\3\12\1\u0155\2\12\1\0\1\12\7\0"+
    "\1\12\6\0\5\12\1\0\2\12\1\0\3\12\1\0"+
    "\4\12\1\u0156\2\12\5\0\1\12\2\0\1\12\4\0"+
    "\16\12\1\0\1\12\7\0\1\12\6\0\5\12\1\0"+
    "\2\12\1\0\3\12\1\0\7\12\5\0\1\12\2\0"+
    "\1\12\4\0\1\12\1\u0157\14\12\1\0\1\12\7\0"+
    "\1\12\6\0\5\12\1\0\2\12\1\0\3\12\1\0"+
    "\1\u0158\6\12\5\0\1\12\2\0\1\12\4\0\16\12"+
    "\1\0\1\12\7\0\1\12\6\0\5\12\1\0\2\12"+
    "\1\0\3\12\1\0\3\12\1\u0159\3\12\5\0\1\12"+
    "\2\0\1\12\4\0\16\12\1\0\1\12\7\0\1\12"+
    "\6\0\5\12\1\0\2\12\1\0\3\12\1\0\7\12"+
    "\5\0\1\12\2\0\1\12\4\0\7\12\1\u015a\6\12"+
    "\1\0\1\12\7\0\1\12\6\0\4\12\1\u015b\1\0"+
    "\2\12\1\0\3\12\1\0\7\12\5\0\1\12\2\0"+
    "\1\12\4\0\16\12\1\0\1\12\7\0\1\12\6\0"+
    "\4\12\1\u015c\1\0\2\12\1\0\3\12\1\0\7\12"+
    "\5\0\1\12\2\0\1\12\4\0\16\12\1\0\1\12"+
    "\7\0\1\12\6\0\5\12\1\0\2\12\1\0\3\12"+
    "\1\0\7\12\5\0\1\12\2\0\1\12\4\0\12\12"+
    "\1\u015d\3\12\1\0\1\12\7\0\1\12\6\0\5\12"+
    "\1\0\2\12\1\0\3\12\1\0\7\12\5\0\1\u015e"+
    "\2\0\1\12\4\0\16\12\1\0\1\12\7\0\1\12"+
    "\6\0\5\12\1\0\2\12\1\0\3\12\1\0\6\12"+
    "\1\u015f\5\0\1\12\2\0\1\12\4\0\16\12\1\0"+
    "\1\12\7\0\1\12\6\0\5\12\1\0\2\12\1\0"+
    "\3\12\1\0\7\12\5\0\1\12\2\0\1\12\4\0"+
    "\11\12\1\u0160\1\12\1\u0161\1\u0162\1\12\1\0\1\12"+
    "\7\0\1\12\6\0\5\12\1\0\2\12\1\0\3\12"+
    "\1\0\4\12\1\u0163\2\12\5\0\1\12\2\0\1\12"+
    "\4\0\16\12\1\0\1\12\7\0\1\12\6\0\5\12"+
    "\1\0\2\12\1\0\1\12\1\u0164\1\12\1\0\7\12"+
    "\5\0\1\12\2\0\1\12\4\0\16\12\1\0\1\12"+
    "\7\0\1\12\6\0\5\12\1\0\2\12\1\0\3\12"+
    "\1\0\7\12\5\0\1\12\2\0\1\12\4\0\15\12"+
    "\1\u0165\1\0\1\12\7\0\1\12\6\0\5\12\1\0"+
    "\2\12\1\0\3\12\1\0\5\12\1\u0166\1\12\5\0"+
    "\1\12\2\0\1\12\4\0\16\12\1\0\1\12\7\0"+
    "\1\12\6\0\5\12\1\0\2\12\1\0\3\12\1\0"+
    "\1\u0167\6\12\5\0\1\12\2\0\1\12\4\0\16\12"+
    "\1\0\1\12\7\0\1\12\6\0\5\12\1\0\2\12"+
    "\1\0\3\12\1\0\7\12\5\0\1\12\2\0\1\12"+
    "\4\0\2\12\1\u0168\13\12\1\0\1\12\7\0\1\12"+
    "\6\0\5\12\1\0\2\12\1\0\3\12\1\0\7\12"+
    "\5\0\1\12\2\0\1\12\4\0\12\12\1\u0169\3\12"+
    "\1\0\1\12\7\0\1\12\6\0\5\12\1\0\2\12"+
    "\1\0\3\12\1\0\7\12\5\0\1\12\2\0\1\12"+
    "\4\0\12\12\1\u016a\3\12\1\0\1\12\7\0\1\12"+
    "\6\0\5\12\1\0\2\12\1\0\3\12\1\0\7\12"+
    "\5\0\1\12\2\0\1\12\4\0\12\12\1\u016b\3\12"+
    "\1\0\1\12\7\0\1\12\6\0\5\12\1\0\2\12"+
    "\1\0\3\12\1\0\7\12\5\0\1\u016c\2\0\1\12"+
    "\4\0\16\12\1\0\1\12\7\0\1\12\6\0\5\12"+
    "\1\0\2\12\1\0\3\12\1\0\5\12\1\u016d\1\12"+
    "\5\0\1\12\2\0\1\12\4\0\16\12\1\0\1\12"+
    "\7\0\1\12\6\0\5\12\1\0\1\u016e\1\12\1\0"+
    "\3\12\1\0\7\12\5\0\1\12\2\0\1\12\4\0"+
    "\16\12\1\0\1\12\7\0\1\12\6\0\5\12\1\0"+
    "\2\12\1\0\3\12\1\0\2\12\1\u016f\4\12\5\0"+
    "\1\12\2\0\1\12\4\0\16\12\1\0\1\12\7\0"+
    "\1\12\6\0\5\12\1\0\2\12\1\0\3\12\1\0"+
    "\4\12\1\u0170\2\12\5\0\1\12\2\0\1\12\4\0"+
    "\16\12\1\0\1\12\7\0\1\12\6\0\5\12\1\0"+
    "\2\12\1\0\3\12\1\0\7\12\5\0\1\12\2\0"+
    "\1\12\4\0\1\u0171\15\12\1\0\1\12\7\0\1\12"+
    "\6\0\5\12\1\0\2\12\1\0\3\12\1\0\1\u0172"+
    "\6\12\5\0\1\12\2\0\1\12\4\0\16\12\1\0"+
    "\1\12\7\0\1\12\6\0\5\12\1\0\1\u0173\1\12"+
    "\1\0\3\12\1\0\7\12\5\0\1\12\2\0\1\12"+
    "\4\0\16\12\1\0\1\12\7\0\1\12\6\0\5\12"+
    "\1\0\2\12\1\0\3\12\1\0\1\u0174\6\12\5\0"+
    "\1\12\2\0\1\12\4\0\16\12\1\0\1\12\7\0"+
    "\1\12\6\0\5\12\1\0\2\12\1\0\3\12\1\0"+
    "\7\12\5\0\1\12\2\0\1\12\4\0\1\12\1\u0175"+
    "\14\12\1\0\1\12\7\0\1\12\6\0\5\12\1\0"+
    "\2\12\1\0\3\12\1\0\3\12\1\u0176\3\12\5\0"+
    "\1\12\2\0\1\12\4\0\16\12\1\0\1\12\7\0"+
    "\1\12\6\0\5\12\1\0\2\12\1\0\3\12\1\0"+
    "\4\12\1\u0177\2\12\5\0\1\12\2\0\1\12\4\0"+
    "\16\12\1\0\1\12\7\0\1\12\6\0\5\12\1\0"+
    "\2\12\1\0\3\12\1\0\7\12\5\0\1\12\2\0"+
    "\1\12\4\0\12\12\1\u0178\3\12\1\0\1\12\7\0"+
    "\1\12\6\0\5\12\1\0\2\12\1\0\3\12\1\0"+
    "\4\12\1\u0179\2\12\5\0\1\12\2\0\1\12\4\0"+
    "\16\12\1\0\1\12\7\0\1\12\6\0\5\12\1\0"+
    "\2\12\1\0\3\12\1\0\6\12\1\u017a\5\0\1\12"+
    "\2\0\1\12\4\0\16\12\1\0\1\12\7\0\1\12"+
    "\6\0\5\12\1\0\2\12\1\0\3\12\1\0\3\12"+
    "\1\u017b\3\12\5\0\1\12\2\0\1\12\4\0\16\12"+
    "\1\0\1\12\7\0\1\12\6\0\5\12\1\0\2\12"+
    "\1\0\3\12\1\0\3\12\1\u017c\3\12\5\0\1\12"+
    "\2\0\1\12\4\0\16\12\1\0\1\12\7\0\1\12"+
    "\6\0\5\12\1\0\2\12\1\0\3\12\1\0\1\u017d"+
    "\6\12\5\0\1\12\2\0\1\12\4\0\16\12\1\0"+
    "\1\12\7\0\1\12\6\0\5\12\1\0\2\12\1\0"+
    "\3\12\1\0\3\12\1\u017e\3\12\5\0\1\12\2\0"+
    "\1\12\4\0\16\12\1\0\1\12\7\0\1\12\6\0"+
    "\5\12\1\0\2\12\1\0\3\12\1\0\4\12\1\u017f"+
    "\2\12\5\0\1\12\2\0\1\12\4\0\16\12\1\0"+
    "\1\12\7\0\1\12\6\0\5\12\1\0\2\12\1\0"+
    "\3\12\1\0\4\12\1\u0180\2\12\5\0\1\12\2\0"+
    "\1\12\4\0\16\12\1\0\1\12\7\0\1\12\6\0"+
    "\5\12\1\0\2\12\1\0\3\12\1\0\3\12\1\u0181"+
    "\3\12\5\0\1\12\2\0\1\12\4\0\16\12\1\0"+
    "\1\12\7\0\1\12\6\0\5\12\1\0\2\12\1\0"+
    "\3\12\1\0\7\12\5\0\1\12\2\0\1\12\4\0"+
    "\13\12\1\u0182\2\12\1\0\1\12\7\0\1\12\6\0"+
    "\5\12\1\0\2\12\1\0\3\12\1\0\3\12\1\u0183"+
    "\3\12\5\0\1\12\2\0\1\12\4\0\16\12\1\0"+
    "\1\12\7\0\1\12\6\0\5\12\1\0\2\12\1\0"+
    "\3\12\1\0\7\12\5\0\1\12\2\0\1\12\4\0"+
    "\7\12\1\u0184\6\12\1\0\1\12\7\0\1\12\6\0"+
    "\5\12\1\0\2\12\1\0\3\12\1\0\7\12\5\0"+
    "\1\u0185\2\0\1\12\4\0\16\12\1\0\1\12\7\0"+
    "\1\12\6\0\5\12\1\0\2\12\1\0\3\12\1\0"+
    "\4\12\1\u0186\2\12\5\0\1\12\2\0\1\12\4\0"+
    "\16\12\1\0\1\12\7\0\1\12\6\0\5\12\1\0"+
    "\2\12\1\0\3\12\1\0\7\12\5\0\1\12\2\0"+
    "\1\12\4\0\12\12\1\u0187\3\12\1\0\1\12\7\0"+
    "\1\12\6\0\5\12\1\0\2\12\1\0\3\12\1\0"+
    "\4\12\1\u0188\2\12\5\0\1\12\2\0\1\12\4\0"+
    "\16\12\1\0\1\12\7\0\1\12\6\0\5\12\1\0"+
    "\2\12\1\0\1\12\1\u0189\1\12\1\0\7\12\5\0"+
    "\1\12\2\0\1\12\4\0\16\12\1\0\1\12\7\0"+
    "\1\12\6\0\5\12\1\0\2\12\1\0\3\12\1\0"+
    "\7\12\5\0\1\u018a\2\0\1\12\4\0\16\12\1\0"+
    "\1\12\7\0\1\12\6\0\5\12\1\0\2\12\1\0"+
    "\3\12\1\0\7\12\5\0\1\u018b\2\0\1\12\4\0"+
    "\16\12\1\0\1\12\7\0\1\12\6\0\5\12\1\0"+
    "\2\12\1\0\3\12\1\0\5\12\1\u018c\1\12\5\0"+
    "\1\12\2\0\1\12\4\0\16\12\1\0\1\12\7\0"+
    "\1\12\6\0\5\12\1\0\1\u018d\1\12\1\0\3\12"+
    "\1\0\7\12\5\0\1\12\2\0\1\12\4\0\16\12"+
    "\1\0\1\12\7\0\1\12\6\0\5\12\1\0\2\12"+
    "\1\0\3\12\1\0\7\12\5\0\1\12\2\0\1\12"+
    "\4\0\12\12\1\u018e\3\12\1\0\1\12\7\0\1\12"+
    "\6\0\5\12\1\0\2\12\1\0\3\12\1\0\1\u018f"+
    "\6\12\5\0\1\12\2\0\1\12\4\0\16\12\1\0"+
    "\1\12\7\0\1\12\6\0\5\12\1\0\2\12\1\0"+
    "\3\12\1\0\7\12\5\0\1\12\2\0\1\12\4\0"+
    "\13\12\1\u0190\2\12\1\0\1\12\7\0\1\12\6\0"+
    "\5\12\1\0\2\12\1\0\3\12\1\0\7\12\5\0"+
    "\1\12\2\0\1\12\4\0\12\12\1\u0191\3\12\1\0"+
    "\1\12\7\0\1\12";

  private static int [] zzUnpackTrans() {
    int [] result = new int[19404];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\1\1\11\2\1\1\11\21\1\1\11\1\1"+
    "\2\11\3\1\4\11\7\1\1\11\1\1\1\11\1\1"+
    "\1\11\1\1\1\11\5\1\1\11\1\0\1\1\1\0"+
    "\1\11\2\0\1\11\1\1\1\0\4\1\1\11\23\1"+
    "\6\11\16\1\4\11\1\0\2\1\1\0\1\1\1\0"+
    "\1\11\1\0\46\1\2\0\2\1\1\0\43\1\2\11"+
    "\1\0\33\1\1\11\254\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[401];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _WgslLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _WgslLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL.charAt(zzMarkedPosL-1)) {
        case '\n':
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':  // fall through
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 117: break;
          case 2: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 118: break;
          case 3: 
            { return FORWARD_SLASH;
            } 
            // fall through
          case 119: break;
          case 4: 
            { return STAR;
            } 
            // fall through
          case 120: break;
          case 5: 
            { return MINUS;
            } 
            // fall through
          case 121: break;
          case 6: 
            { return INT_LITERAL;
            } 
            // fall through
          case 122: break;
          case 7: 
            { return IDENT;
            } 
            // fall through
          case 123: break;
          case 8: 
            { return PERIOD;
            } 
            // fall through
          case 124: break;
          case 9: 
            { return PLUS;
            } 
            // fall through
          case 125: break;
          case 10: 
            { return UNDERSCORE;
            } 
            // fall through
          case 126: break;
          case 11: 
            { return BRACKET_LEFT;
            } 
            // fall through
          case 127: break;
          case 12: 
            { return COMMA;
            } 
            // fall through
          case 128: break;
          case 13: 
            { return BRACKET_RIGHT;
            } 
            // fall through
          case 129: break;
          case 14: 
            { return PAREN_LEFT;
            } 
            // fall through
          case 130: break;
          case 15: 
            { return PAREN_RIGHT;
            } 
            // fall through
          case 131: break;
          case 16: 
            { return LESS_THAN;
            } 
            // fall through
          case 132: break;
          case 17: 
            { return GREATER_THAN;
            } 
            // fall through
          case 133: break;
          case 18: 
            { return BRACE_LEFT;
            } 
            // fall through
          case 134: break;
          case 19: 
            { return BRACE_RIGHT;
            } 
            // fall through
          case 135: break;
          case 20: 
            { return SEMICOLON;
            } 
            // fall through
          case 136: break;
          case 21: 
            { return AT;
            } 
            // fall through
          case 137: break;
          case 22: 
            { return EQUAL;
            } 
            // fall through
          case 138: break;
          case 23: 
            { return COLON;
            } 
            // fall through
          case 139: break;
          case 24: 
            { return BANG;
            } 
            // fall through
          case 140: break;
          case 25: 
            { return TILDE;
            } 
            // fall through
          case 141: break;
          case 26: 
            { return AND;
            } 
            // fall through
          case 142: break;
          case 27: 
            { return MODULO;
            } 
            // fall through
          case 143: break;
          case 28: 
            { return OR;
            } 
            // fall through
          case 144: break;
          case 29: 
            { return XOR;
            } 
            // fall through
          case 145: break;
          case 30: 
            { return PREPROCESSOR_DECLARATION;
            } 
            // fall through
          case 146: break;
          case 31: 
            { return LINE_COMMENT;
            } 
            // fall through
          case 147: break;
          case 32: 
            { return BLOCK_COMMENT;
            } 
            // fall through
          case 148: break;
          case 33: 
            { return MINUS_MINUS;
            } 
            // fall through
          case 149: break;
          case 34: 
            { return ARROW;
            } 
            // fall through
          case 150: break;
          case 35: 
            { return UINT_LITERAL;
            } 
            // fall through
          case 151: break;
          case 36: 
            { return DECIMAL_FLOAT_LITERAL;
            } 
            // fall through
          case 152: break;
          case 37: 
            { return PLUS_PLUS;
            } 
            // fall through
          case 153: break;
          case 38: 
            { return FN;
            } 
            // fall through
          case 154: break;
          case 39: 
            { return ATTR_LEFT;
            } 
            // fall through
          case 155: break;
          case 40: 
            { return ATTR_RIGHT;
            } 
            // fall through
          case 156: break;
          case 41: 
            { return SHIFT_LEFT;
            } 
            // fall through
          case 157: break;
          case 42: 
            { return LESS_THAN_EQUAL;
            } 
            // fall through
          case 158: break;
          case 43: 
            { return SHIFT_RIGHT;
            } 
            // fall through
          case 159: break;
          case 44: 
            { return GREATER_THAN_EQUAL;
            } 
            // fall through
          case 160: break;
          case 45: 
            { return IF;
            } 
            // fall through
          case 161: break;
          case 46: 
            { return EQUAL_EQUAL;
            } 
            // fall through
          case 162: break;
          case 47: 
            { return NOT_EQUAL;
            } 
            // fall through
          case 163: break;
          case 48: 
            { return AND_AND;
            } 
            // fall through
          case 164: break;
          case 49: 
            { return OR_OR;
            } 
            // fall through
          case 165: break;
          case 50: 
            { return DOC_COMMENT;
            } 
            // fall through
          case 166: break;
          case 51: 
            { return UINT32;
            } 
            // fall through
          case 167: break;
          case 52: 
            { return FOR;
            } 
            // fall through
          case 168: break;
          case 53: 
            { return FLOAT32;
            } 
            // fall through
          case 169: break;
          case 54: 
            { return POINTER;
            } 
            // fall through
          case 170: break;
          case 55: 
            { return LET;
            } 
            // fall through
          case 171: break;
          case 56: 
            { return INT32;
            } 
            // fall through
          case 172: break;
          case 57: 
            { return VAR;
            } 
            // fall through
          case 173: break;
          case 58: 
            { return HEX_FLOAT_LITERAL;
            } 
            // fall through
          case 174: break;
          case 59: 
            { return ELSE;
            } 
            // fall through
          case 175: break;
          case 60: 
            { return TRUE;
            } 
            // fall through
          case 176: break;
          case 61: 
            { return TYPE;
            } 
            // fall through
          case 177: break;
          case 62: 
            { return LOOP;
            } 
            // fall through
          case 178: break;
          case 63: 
            { return CASE;
            } 
            // fall through
          case 179: break;
          case 64: 
            { return VEC2;
            } 
            // fall through
          case 180: break;
          case 65: 
            { return VEC3;
            } 
            // fall through
          case 181: break;
          case 66: 
            { return VEC4;
            } 
            // fall through
          case 182: break;
          case 67: 
            { return BOOL;
            } 
            // fall through
          case 183: break;
          case 68: 
            { return FALSE;
            } 
            // fall through
          case 184: break;
          case 69: 
            { return ARRAY;
            } 
            // fall through
          case 185: break;
          case 70: 
            { return WHILE;
            } 
            // fall through
          case 186: break;
          case 71: 
            { return BREAK;
            } 
            // fall through
          case 187: break;
          case 72: 
            { return ENABLE;
            } 
            // fall through
          case 188: break;
          case 73: 
            { return RETURN;
            } 
            // fall through
          case 189: break;
          case 74: 
            { return ATOMIC;
            } 
            // fall through
          case 190: break;
          case 75: 
            { return STRUCT;
            } 
            // fall through
          case 191: break;
          case 76: 
            { return SWITCH;
            } 
            // fall through
          case 192: break;
          case 77: 
            { return MAT2X2;
            } 
            // fall through
          case 193: break;
          case 78: 
            { return MAT2X3;
            } 
            // fall through
          case 194: break;
          case 79: 
            { return MAT2X4;
            } 
            // fall through
          case 195: break;
          case 80: 
            { return MAT3X2;
            } 
            // fall through
          case 196: break;
          case 81: 
            { return MAT3X3;
            } 
            // fall through
          case 197: break;
          case 82: 
            { return MAT3X4;
            } 
            // fall through
          case 198: break;
          case 83: 
            { return MAT4X2;
            } 
            // fall through
          case 199: break;
          case 84: 
            { return MAT4X3;
            } 
            // fall through
          case 200: break;
          case 85: 
            { return MAT4X4;
            } 
            // fall through
          case 201: break;
          case 86: 
            { return UNIFORM;
            } 
            // fall through
          case 202: break;
          case 87: 
            { return PRIVATE;
            } 
            // fall through
          case 203: break;
          case 88: 
            { return STORAGE;
            } 
            // fall through
          case 204: break;
          case 89: 
            { return SAMPLER;
            } 
            // fall through
          case 205: break;
          case 90: 
            { return DEFAULT;
            } 
            // fall through
          case 206: break;
          case 91: 
            { return DISCARD;
            } 
            // fall through
          case 207: break;
          case 92: 
            { return BITCAST;
            } 
            // fall through
          case 208: break;
          case 93: 
            { return FUNCTION;
            } 
            // fall through
          case 209: break;
          case 94: 
            { return CONTINUE;
            } 
            // fall through
          case 210: break;
          case 95: 
            { return WORKGROUP;
            } 
            // fall through
          case 211: break;
          case 96: 
            { return TEXTURE_1D;
            } 
            // fall through
          case 212: break;
          case 97: 
            { return TEXTURE_2D;
            } 
            // fall through
          case 213: break;
          case 98: 
            { return TEXTURE_3D;
            } 
            // fall through
          case 214: break;
          case 99: 
            { return CONTINUING;
            } 
            // fall through
          case 215: break;
          case 100: 
            { return FALLTHROUGH;
            } 
            // fall through
          case 216: break;
          case 101: 
            { return TEXTURE_CUBE;
            } 
            // fall through
          case 217: break;
          case 102: 
            { return STATIC_ASSERT;
            } 
            // fall through
          case 218: break;
          case 103: 
            { return PUSH_CONSTANT;
            } 
            // fall through
          case 219: break;
          case 104: 
            { return TEXTURE_DEPTH_2D;
            } 
            // fall through
          case 220: break;
          case 105: 
            { return TEXTURE_2D_ARRAY;
            } 
            // fall through
          case 221: break;
          case 106: 
            { return TEXTURE_STORAGE_1D;
            } 
            // fall through
          case 222: break;
          case 107: 
            { return TEXTURE_STORAGE_2D;
            } 
            // fall through
          case 223: break;
          case 108: 
            { return TEXTURE_STORAGE_3D;
            } 
            // fall through
          case 224: break;
          case 109: 
            { return TEXTURE_CUBE_ARRAY;
            } 
            // fall through
          case 225: break;
          case 110: 
            { return TEXTURE_DEPTH_CUBE;
            } 
            // fall through
          case 226: break;
          case 111: 
            { return SAMPLER_COMPARISON;
            } 
            // fall through
          case 227: break;
          case 112: 
            { return TEXTURE_DEPTH_2D_ARRAY;
            } 
            // fall through
          case 228: break;
          case 113: 
            { return TEXTURE_MULTISAMPLED_2D;
            } 
            // fall through
          case 229: break;
          case 114: 
            { return TEXTURE_STORAGE_2D_ARRAY;
            } 
            // fall through
          case 230: break;
          case 115: 
            { return TEXTURE_DEPTH_CUBE_ARRAY;
            } 
            // fall through
          case 231: break;
          case 116: 
            { return TEXTURE_DEPTH_MULTISAMPLED_2D;
            } 
            // fall through
          case 232: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
