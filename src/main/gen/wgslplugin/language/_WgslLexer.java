// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: WGSLLexer.flex

package wgslplugin.language;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import java.util.*;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static wgslplugin.language.psi.WGSLTypes.*;


public class _WgslLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int TYPE_SPEC = 2;
  public static final int BIND_SPEC = 4;
  public static final int ATTRIBUTE = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  1,  2,  2,  3,  3,  4, 4
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\25\u0100\1\u0200\11\u0100\1\u0300\17\u0100\1\u0400\u10cf\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\1\1\2\22\0\1\1\1\3"+
    "\1\0\1\4\1\0\1\5\1\6\1\0\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\24\1\26\1\24"+
    "\1\27\1\30\1\31\1\32\1\33\1\0\1\34\1\35"+
    "\3\36\1\37\1\36\11\40\1\41\12\40\1\42\1\0"+
    "\1\43\1\44\1\45\1\0\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\40\1\57\1\60"+
    "\1\61\1\62\1\63\1\64\1\40\1\65\1\66\1\67"+
    "\1\70\1\71\1\72\1\73\1\74\1\40\1\75\1\76"+
    "\1\77\1\100\6\0\1\1\32\0\1\1\u01df\0\1\1"+
    "\177\0\13\1\35\0\2\1\5\0\1\1\57\0\1\1"+
    "\240\0\1\1\377\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1280];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\1\1\2\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\2\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\21\25\1\32\1\33\1\34\1\35\2\2"+
    "\1\36\1\37\2\1\2\16\1\40\1\41\1\42\1\43"+
    "\1\1\15\25\3\1\2\25\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\2\0\1\16\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\2\0\1\62\1\0\1\63"+
    "\1\64\1\65\1\66\1\67\1\70\1\71\15\25\1\72"+
    "\2\25\1\73\20\25\1\74\1\75\2\0\1\16\1\0"+
    "\15\25\1\76\1\25\1\0\1\56\2\0\1\56\1\0"+
    "\1\16\1\77\1\100\14\25\1\101\1\25\1\102\1\103"+
    "\1\104\3\25\1\105\10\25\1\106\1\107\2\25\1\0"+
    "\1\16\22\25\1\16\1\57\1\110\1\0\4\25\1\111"+
    "\1\25\1\112\4\25\1\113\3\25\1\114\12\25\1\115"+
    "\1\116\1\117\1\120\1\121\1\25\1\16\16\25\1\122"+
    "\13\25\1\0\1\110\1\123\3\25\1\124\1\125\5\25"+
    "\1\126\12\25\1\127\41\25\1\130\1\110\1\131\5\25"+
    "\1\132\1\25\1\133\1\134\1\135\1\136\1\137\1\140"+
    "\1\141\1\142\1\143\1\25\1\144\2\25\1\145\1\146"+
    "\13\25\1\147\1\25\1\150\26\25\1\151\1\25\1\152"+
    "\1\153\2\25\1\154\4\25\1\155\2\25\1\156\1\157"+
    "\1\25\1\160\1\161\1\162\1\163\10\25\1\164\1\25"+
    "\1\165\14\25\1\166\1\167\2\25\1\170\2\25\1\171"+
    "\4\25\1\172\1\25\1\173\1\174\3\25\1\175\1\176"+
    "\1\25\1\177\1\200\1\201\1\202\34\25\1\203\1\204"+
    "\7\25\1\205\1\25\1\206\1\25\1\207\1\25\1\210"+
    "\3\25\1\211\1\212\1\213\4\25\1\214\1\25\1\215"+
    "\3\25\1\216\1\217\1\25\1\220\1\221\1\222\1\223"+
    "\1\25\1\224\13\25\1\225\1\226\3\25\1\227\1\25"+
    "\1\230\5\25\1\231\1\232\1\25\1\233\7\25\1\234"+
    "\21\25\1\235\1\236\1\25\1\237\1\25\1\240\15\25"+
    "\1\241\1\242\1\25\1\243\2\25\1\244\1\245\1\246"+
    "\17\25\1\247\6\25\1\250\1\25\1\251\1\25\1\252"+
    "\4\25\1\253";

  private static int [] zzUnpackAction() {
    int [] result = new int[662];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\101\0\202\0\303\0\u0104\0\u0145\0\u0186\0\u01c7"+
    "\0\u0208\0\u0249\0\u028a\0\u0145\0\u0145\0\u02cb\0\u030c\0\u0145"+
    "\0\u034d\0\u038e\0\u03cf\0\u0410\0\u0451\0\u0145\0\u0145\0\u0492"+
    "\0\u04d3\0\u0514\0\u0145\0\u0555\0\u0596\0\u0145\0\u05d7\0\u0555"+
    "\0\u0618\0\u0659\0\u069a\0\u06db\0\u071c\0\u075d\0\u079e\0\u07df"+
    "\0\u0820\0\u0861\0\u08a2\0\u08e3\0\u0924\0\u0965\0\u09a6\0\u09e7"+
    "\0\u0a28\0\u0145\0\u0a69\0\u0145\0\u0145\0\u0aaa\0\u0aeb\0\u0b2c"+
    "\0\u0145\0\u0b6d\0\u0bae\0\u0bef\0\u0c30\0\u0145\0\u0145\0\u0145"+
    "\0\u0145\0\u0555\0\u0c71\0\u0cb2\0\u0cf3\0\u0d34\0\u0d75\0\u0db6"+
    "\0\u0df7\0\u0e38\0\u0e79\0\u0eba\0\u0efb\0\u0f3c\0\u0f7d\0\u0fbe"+
    "\0\u038e\0\u0fff\0\u1040\0\u1081\0\u0145\0\u0145\0\u0145\0\u0145"+
    "\0\u0145\0\u0145\0\u0145\0\u0145\0\u038e\0\u10c2\0\u1103\0\u0145"+
    "\0\u0145\0\u1144\0\u1185\0\u11c6\0\u0145\0\u1207\0\u1248\0\u0145"+
    "\0\u1289\0\u12ca\0\u0145\0\u0145\0\u0145\0\u130b\0\u0145\0\u0145"+
    "\0\u134c\0\u138d\0\u13ce\0\u140f\0\u1450\0\u1491\0\u14d2\0\u1513"+
    "\0\u1554\0\u1595\0\u15d6\0\u1617\0\u1658\0\u0555\0\u1699\0\u16da"+
    "\0\u0555\0\u171b\0\u175c\0\u179d\0\u17de\0\u181f\0\u1860\0\u18a1"+
    "\0\u18e2\0\u1923\0\u1964\0\u19a5\0\u19e6\0\u1a27\0\u1a68\0\u1aa9"+
    "\0\u1aea\0\u0145\0\u0145\0\u1b2b\0\u1b6c\0\u1bad\0\u1bee\0\u1c2f"+
    "\0\u1c70\0\u1cb1\0\u1cf2\0\u1d33\0\u1d74\0\u1db5\0\u1df6\0\u1e37"+
    "\0\u1e78\0\u1eb9\0\u1efa\0\u1f3b\0\u0145\0\u1f7c\0\u1fbd\0\u0145"+
    "\0\u1ffe\0\u203f\0\u2080\0\u20c1\0\u2102\0\u0145\0\u0145\0\u2143"+
    "\0\u2184\0\u21c5\0\u2206\0\u2247\0\u2288\0\u22c9\0\u230a\0\u234b"+
    "\0\u238c\0\u23cd\0\u240e\0\u0555\0\u244f\0\u0555\0\u0555\0\u0555"+
    "\0\u2490\0\u24d1\0\u2512\0\u0555\0\u2553\0\u2594\0\u25d5\0\u2616"+
    "\0\u2657\0\u2698\0\u26d9\0\u271a\0\u0555\0\u0555\0\u275b\0\u279c"+
    "\0\u27dd\0\u281e\0\u285f\0\u28a0\0\u28e1\0\u2922\0\u2963\0\u29a4"+
    "\0\u29e5\0\u2a26\0\u2a67\0\u2aa8\0\u2ae9\0\u2b2a\0\u2b6b\0\u2bac"+
    "\0\u2bed\0\u2c2e\0\u2c6f\0\u2cb0\0\u2cf1\0\u0145\0\u2d32\0\u2d73"+
    "\0\u2db4\0\u2df5\0\u2e36\0\u2e77\0\u0555\0\u2eb8\0\u0555\0\u2ef9"+
    "\0\u2f3a\0\u2f7b\0\u2fbc\0\u0555\0\u2ffd\0\u303e\0\u307f\0\u0555"+
    "\0\u30c0\0\u3101\0\u3142\0\u3183\0\u31c4\0\u3205\0\u3246\0\u3287"+
    "\0\u32c8\0\u3309\0\u0555\0\u0555\0\u0555\0\u0555\0\u0555\0\u334a"+
    "\0\u27dd\0\u338b\0\u33cc\0\u340d\0\u344e\0\u348f\0\u34d0\0\u3511"+
    "\0\u3552\0\u3593\0\u35d4\0\u3615\0\u3656\0\u3697\0\u36d8\0\u3719"+
    "\0\u375a\0\u379b\0\u37dc\0\u381d\0\u385e\0\u389f\0\u38e0\0\u3921"+
    "\0\u3962\0\u39a3\0\u39e4\0\u3a25\0\u3a66\0\u0555\0\u3aa7\0\u3ae8"+
    "\0\u3b29\0\u0555\0\u0555\0\u3b6a\0\u3bab\0\u3bec\0\u3c2d\0\u3c6e"+
    "\0\u0555\0\u3caf\0\u3cf0\0\u3d31\0\u3d72\0\u3db3\0\u3df4\0\u3e35"+
    "\0\u3e76\0\u3eb7\0\u3ef8\0\u0555\0\u3f39\0\u3f7a\0\u3fbb\0\u3ffc"+
    "\0\u403d\0\u407e\0\u40bf\0\u4100\0\u4141\0\u4182\0\u41c3\0\u4204"+
    "\0\u4245\0\u4286\0\u42c7\0\u4308\0\u4349\0\u438a\0\u43cb\0\u440c"+
    "\0\u444d\0\u448e\0\u44cf\0\u4510\0\u4551\0\u4592\0\u45d3\0\u4614"+
    "\0\u4655\0\u4696\0\u46d7\0\u4718\0\u4759\0\u0555\0\u0145\0\u0555"+
    "\0\u479a\0\u47db\0\u481c\0\u485d\0\u489e\0\u0555\0\u48df\0\u0555"+
    "\0\u0555\0\u0555\0\u0555\0\u0555\0\u0555\0\u0555\0\u0555\0\u0555"+
    "\0\u4920\0\u0555\0\u4961\0\u49a2\0\u0555\0\u0555\0\u49e3\0\u4a24"+
    "\0\u4a65\0\u4aa6\0\u4ae7\0\u4b28\0\u4b69\0\u4baa\0\u4beb\0\u4c2c"+
    "\0\u4c6d\0\u0555\0\u4cae\0\u0555\0\u4cef\0\u4d30\0\u4d71\0\u4db2"+
    "\0\u4df3\0\u4e34\0\u4e75\0\u4eb6\0\u4ef7\0\u4f38\0\u4f79\0\u4fba"+
    "\0\u4ffb\0\u503c\0\u507d\0\u50be\0\u50ff\0\u5140\0\u5181\0\u51c2"+
    "\0\u5203\0\u5244\0\u0555\0\u5285\0\u0555\0\u0555\0\u52c6\0\u5307"+
    "\0\u5348\0\u5389\0\u53ca\0\u540b\0\u544c\0\u0555\0\u548d\0\u54ce"+
    "\0\u0555\0\u0555\0\u550f\0\u0555\0\u0555\0\u0555\0\u0555\0\u5550"+
    "\0\u5591\0\u55d2\0\u5613\0\u5654\0\u5695\0\u56d6\0\u5717\0\u0555"+
    "\0\u5758\0\u0555\0\u5799\0\u57da\0\u581b\0\u585c\0\u589d\0\u58de"+
    "\0\u591f\0\u5960\0\u59a1\0\u59e2\0\u5a23\0\u5a64\0\u0555\0\u0555"+
    "\0\u5aa5\0\u5ae6\0\u0555\0\u5b27\0\u5b68\0\u0555\0\u5ba9\0\u5bea"+
    "\0\u5c2b\0\u5c6c\0\u0555\0\u5cad\0\u0555\0\u0555\0\u5cee\0\u5d2f"+
    "\0\u5d70\0\u0555\0\u0555\0\u5db1\0\u0555\0\u0555\0\u0555\0\u0555"+
    "\0\u5df2\0\u5e33\0\u5e74\0\u5eb5\0\u5ef6\0\u5f37\0\u5f78\0\u5fb9"+
    "\0\u5ffa\0\u603b\0\u607c\0\u60bd\0\u60fe\0\u613f\0\u6180\0\u61c1"+
    "\0\u6202\0\u6243\0\u6284\0\u62c5\0\u6306\0\u6347\0\u6388\0\u63c9"+
    "\0\u640a\0\u644b\0\u648c\0\u64cd\0\u0555\0\u0555\0\u650e\0\u654f"+
    "\0\u6590\0\u65d1\0\u6612\0\u6653\0\u6694\0\u0555\0\u66d5\0\u0555"+
    "\0\u6716\0\u0555\0\u6757\0\u0555\0\u6798\0\u67d9\0\u681a\0\u0555"+
    "\0\u685b\0\u0555\0\u689c\0\u68dd\0\u691e\0\u695f\0\u69a0\0\u69e1"+
    "\0\u0555\0\u6a22\0\u6a63\0\u6aa4\0\u0555\0\u0555\0\u6ae5\0\u0555"+
    "\0\u0555\0\u0555\0\u6b26\0\u6b67\0\u0555\0\u6ba8\0\u6be9\0\u6c2a"+
    "\0\u6c6b\0\u6cac\0\u6ced\0\u6d2e\0\u6d6f\0\u6db0\0\u6df1\0\u6e32"+
    "\0\u0555\0\u0555\0\u6e73\0\u6eb4\0\u6ef5\0\u0555\0\u6f36\0\u6f77"+
    "\0\u6fb8\0\u6ff9\0\u703a\0\u707b\0\u70bc\0\u0555\0\u0555\0\u70fd"+
    "\0\u0555\0\u713e\0\u717f\0\u71c0\0\u7201\0\u7242\0\u7283\0\u72c4"+
    "\0\u0555\0\u7305\0\u7346\0\u7387\0\u73c8\0\u7409\0\u744a\0\u748b"+
    "\0\u74cc\0\u750d\0\u754e\0\u758f\0\u75d0\0\u7611\0\u7652\0\u7693"+
    "\0\u76d4\0\u7715\0\u0555\0\u0555\0\u7756\0\u0555\0\u7797\0\u77d8"+
    "\0\u7819\0\u785a\0\u789b\0\u78dc\0\u791d\0\u795e\0\u799f\0\u79e0"+
    "\0\u7a21\0\u7a62\0\u7aa3\0\u7ae4\0\u7b25\0\u0555\0\u0555\0\u7b66"+
    "\0\u7ba7\0\u7be8\0\u7c29\0\u0555\0\u7c6a\0\u0555\0\u7cab\0\u7cec"+
    "\0\u7d2d\0\u7d6e\0\u7daf\0\u7df0\0\u7e31\0\u7e72\0\u7eb3\0\u7ef4"+
    "\0\u7f35\0\u7f76\0\u7fb7\0\u7ff8\0\u8039\0\u0555\0\u807a\0\u80bb"+
    "\0\u80fc\0\u813d\0\u817e\0\u81bf\0\u0555\0\u8200\0\u0555\0\u8241"+
    "\0\u0555\0\u8282\0\u82c3\0\u8304\0\u8345\0\u0555";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[662];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\6\1\7\1\10\1\11\1\6\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\7\25\1\26\1\27\1\30\1\31\1\32\1\33\5\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\2\34\1\47\1\34\1\50\1\51\1\34"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\2\34\1\62\1\63\1\64\1\65\1\6\1\66\1\67"+
    "\1\11\1\70\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\7\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\5\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\2\34"+
    "\1\47\1\34\1\50\1\51\1\34\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\1\61\2\34\1\62\1\63"+
    "\1\64\1\65\1\6\1\7\1\10\4\6\1\71\3\6"+
    "\1\20\1\72\1\6\1\73\1\74\7\75\1\76\1\6"+
    "\1\77\1\100\1\101\1\6\5\34\3\6\1\102\1\103"+
    "\1\104\3\34\1\105\2\34\1\106\2\34\1\51\2\34"+
    "\1\107\1\110\1\111\1\34\1\112\1\113\1\114\2\34"+
    "\5\6\1\7\1\10\10\6\1\20\1\72\1\6\1\73"+
    "\1\74\7\75\2\6\1\77\1\6\1\101\1\6\5\34"+
    "\3\6\1\102\1\103\1\115\3\34\1\116\2\34\1\106"+
    "\2\34\1\51\2\34\1\53\2\34\1\117\1\57\1\113"+
    "\3\34\5\6\1\7\1\10\4\6\1\14\1\15\2\6"+
    "\1\20\1\120\1\121\1\73\1\24\7\25\6\6\5\34"+
    "\1\6\1\122\1\6\1\102\5\34\1\123\13\34\1\124"+
    "\5\34\4\6\102\0\1\7\101\0\1\10\130\0\1\125"+
    "\100\0\1\126\54\0\1\127\23\0\1\130\100\0\1\131"+
    "\60\0\1\132\17\0\1\133\62\0\1\134\1\135\1\0"+
    "\1\136\7\137\3\0\1\140\1\141\64\0\10\142\63\0"+
    "\1\143\4\0\1\144\13\0\1\145\63\0\1\142\1\0"+
    "\10\146\10\0\1\147\12\0\1\147\15\0\1\150\2\0"+
    "\1\151\22\0\1\142\1\0\10\25\10\0\1\147\12\0"+
    "\1\147\15\0\1\150\41\0\1\152\1\153\100\0\1\154"+
    "\100\0\1\155\1\156\64\0\10\34\6\0\5\34\3\0"+
    "\30\34\46\0\1\157\70\0\1\160\65\0\10\34\6\0"+
    "\5\34\3\0\20\34\1\161\1\34\1\162\5\34\23\0"+
    "\10\34\6\0\5\34\3\0\11\34\1\163\4\34\1\164"+
    "\1\34\1\165\7\34\23\0\10\34\6\0\5\34\3\0"+
    "\1\34\1\166\14\34\1\167\11\34\23\0\10\34\6\0"+
    "\5\34\3\0\5\34\1\170\3\34\1\171\16\34\23\0"+
    "\10\34\6\0\5\34\3\0\13\34\1\172\1\34\1\173"+
    "\12\34\23\0\3\34\1\174\4\34\6\0\5\34\3\0"+
    "\1\34\1\175\13\34\1\176\1\177\11\34\23\0\3\34"+
    "\1\200\4\34\6\0\5\34\3\0\6\34\1\201\21\34"+
    "\23\0\10\34\6\0\5\34\3\0\5\34\1\202\10\34"+
    "\1\203\11\34\23\0\10\34\6\0\5\34\3\0\1\34"+
    "\1\204\26\34\23\0\10\34\6\0\5\34\3\0\24\34"+
    "\1\205\3\34\23\0\10\34\6\0\5\34\3\0\22\34"+
    "\1\206\5\34\23\0\10\34\6\0\5\34\3\0\5\34"+
    "\1\207\22\34\23\0\10\34\6\0\5\34\3\0\1\34"+
    "\1\210\20\34\1\211\2\34\1\212\2\34\23\0\10\34"+
    "\6\0\5\34\3\0\5\34\1\213\12\34\1\214\6\34"+
    "\1\215\23\0\3\34\1\216\4\34\6\0\5\34\3\0"+
    "\30\34\23\0\10\34\6\0\5\34\3\0\1\34\1\217"+
    "\3\34\1\220\22\34\23\0\10\34\6\0\5\34\3\0"+
    "\10\34\1\221\17\34\36\0\1\222\43\0\1\223\3\0"+
    "\1\66\1\224\1\0\1\70\75\0\1\224\1\67\1\0"+
    "\1\70\74\0\2\70\1\0\76\70\17\0\1\225\7\226"+
    "\63\0\1\143\4\0\1\144\152\0\1\150\2\0\1\227"+
    "\24\0\10\75\41\0\1\150\27\0\10\34\6\0\5\34"+
    "\3\0\22\34\1\162\5\34\23\0\10\34\6\0\5\34"+
    "\3\0\7\34\1\230\6\34\1\164\11\34\23\0\3\34"+
    "\1\174\4\34\6\0\5\34\3\0\23\34\1\231\4\34"+
    "\23\0\3\34\1\200\4\34\6\0\5\34\3\0\30\34"+
    "\23\0\10\34\6\0\5\34\3\0\20\34\1\232\1\34"+
    "\1\206\1\233\4\34\23\0\1\34\1\234\1\34\1\235"+
    "\3\34\1\236\6\0\5\34\3\0\5\34\1\237\1\34"+
    "\1\240\20\34\23\0\10\34\6\0\5\34\3\0\22\34"+
    "\1\241\5\34\23\0\3\34\1\216\4\34\6\0\5\34"+
    "\3\0\15\34\1\242\12\34\23\0\10\34\6\0\5\34"+
    "\3\0\5\34\1\220\22\34\23\0\10\34\6\0\5\34"+
    "\3\0\16\34\1\243\1\34\1\244\7\34\23\0\10\34"+
    "\6\0\5\34\3\0\16\34\1\164\11\34\23\0\3\34"+
    "\1\174\4\34\6\0\5\34\3\0\30\34\23\0\10\34"+
    "\6\0\5\34\3\0\5\34\1\213\22\34\21\0\1\135"+
    "\1\0\1\136\7\137\115\0\1\245\54\0\10\34\6\0"+
    "\5\34\3\0\1\34\1\246\26\34\23\0\10\34\6\0"+
    "\5\34\3\0\20\34\1\214\7\34\21\0\1\142\1\0"+
    "\10\146\10\0\1\147\12\0\1\147\20\0\1\247\22\0"+
    "\1\142\1\0\10\137\10\0\1\147\12\0\1\147\45\0"+
    "\10\142\10\0\1\147\12\0\1\147\1\250\25\0\11\143"+
    "\1\251\67\143\2\144\1\0\76\144\15\0\1\142\1\0"+
    "\10\146\10\0\1\147\12\0\1\147\40\0\1\252\1\0"+
    "\1\252\2\0\10\253\67\0\1\254\1\0\10\255\6\0"+
    "\3\255\6\0\6\255\57\0\1\256\100\0\1\257\65\0"+
    "\10\34\6\0\5\34\3\0\20\34\1\260\7\34\23\0"+
    "\10\34\6\0\5\34\3\0\16\34\1\261\11\34\23\0"+
    "\10\34\6\0\5\34\3\0\15\34\1\262\4\34\1\263"+
    "\5\34\23\0\10\34\6\0\5\34\3\0\16\34\1\264"+
    "\11\34\23\0\10\34\6\0\5\34\3\0\5\34\1\265"+
    "\22\34\23\0\10\34\6\0\5\34\3\0\21\34\1\266"+
    "\6\34\23\0\10\34\6\0\5\34\3\0\15\34\1\267"+
    "\12\34\23\0\10\34\6\0\5\34\3\0\6\34\1\270"+
    "\21\34\23\0\10\34\6\0\5\34\3\0\21\34\1\271"+
    "\6\34\23\0\10\34\6\0\5\34\3\0\21\34\1\272"+
    "\6\34\23\0\10\34\6\0\5\34\3\0\1\34\1\273"+
    "\26\34\23\0\2\34\1\274\5\34\6\0\5\34\3\0"+
    "\30\34\23\0\10\34\6\0\5\34\3\0\13\34\1\275"+
    "\14\34\23\0\10\34\6\0\5\34\3\0\20\34\1\276"+
    "\7\34\23\0\2\34\1\277\5\34\6\0\5\34\3\0"+
    "\30\34\23\0\10\34\6\0\5\34\3\0\22\34\1\300"+
    "\5\34\23\0\10\34\6\0\5\34\3\0\16\34\1\301"+
    "\11\34\23\0\10\34\6\0\5\34\3\0\22\34\1\302"+
    "\5\34\23\0\10\34\6\0\5\34\3\0\5\34\1\303"+
    "\22\34\23\0\10\34\6\0\5\34\3\0\20\34\1\304"+
    "\7\34\23\0\10\34\6\0\5\34\3\0\22\34\1\305"+
    "\5\34\23\0\10\34\6\0\5\34\3\0\14\34\1\306"+
    "\13\34\23\0\10\34\6\0\5\34\3\0\1\34\1\307"+
    "\16\34\1\310\7\34\23\0\10\34\6\0\5\34\3\0"+
    "\11\34\1\311\16\34\23\0\10\34\6\0\5\34\3\0"+
    "\26\34\1\312\1\34\23\0\10\34\6\0\5\34\3\0"+
    "\23\34\1\313\4\34\23\0\10\34\6\0\5\34\3\0"+
    "\17\34\1\314\10\34\23\0\2\34\1\315\5\34\6\0"+
    "\5\34\3\0\30\34\23\0\10\34\6\0\5\34\3\0"+
    "\20\34\1\316\7\34\23\0\10\34\6\0\5\34\3\0"+
    "\3\34\1\317\24\34\23\0\10\34\6\0\5\34\3\0"+
    "\11\34\1\320\16\34\5\0\2\224\1\0\1\70\167\0"+
    "\1\321\24\0\10\226\71\0\10\322\6\0\3\322\6\0"+
    "\6\322\44\0\10\34\6\0\5\34\3\0\20\34\1\323"+
    "\7\34\23\0\10\34\6\0\5\34\3\0\15\34\1\324"+
    "\12\34\23\0\10\34\6\0\5\34\3\0\11\34\1\325"+
    "\16\34\23\0\10\34\6\0\5\34\3\0\21\34\1\326"+
    "\6\34\23\0\6\34\1\327\1\34\6\0\5\34\3\0"+
    "\30\34\23\0\2\34\1\330\5\34\6\0\5\34\3\0"+
    "\30\34\23\0\10\34\6\0\5\34\3\0\21\34\1\331"+
    "\1\34\1\332\4\34\23\0\10\34\6\0\5\34\3\0"+
    "\1\34\1\333\26\34\23\0\1\34\1\334\1\34\1\335"+
    "\3\34\1\336\6\0\5\34\3\0\2\34\1\337\25\34"+
    "\23\0\10\34\6\0\5\34\3\0\16\34\1\340\11\34"+
    "\23\0\10\34\6\0\5\34\3\0\11\34\1\341\16\34"+
    "\23\0\10\34\6\0\5\34\3\0\20\34\1\342\7\34"+
    "\23\0\10\34\6\0\5\34\3\0\11\34\1\343\16\34"+
    "\23\0\10\34\6\0\5\34\3\0\13\34\1\344\14\34"+
    "\21\0\1\254\1\0\10\345\6\0\3\345\6\0\6\345"+
    "\25\0\11\143\1\251\4\143\1\346\62\143\17\0\10\253"+
    "\71\0\10\253\24\0\1\250\44\0\10\347\6\0\3\347"+
    "\6\0\6\347\42\0\1\347\1\0\10\255\6\0\3\255"+
    "\1\0\1\350\4\0\6\255\10\0\1\350\3\0\1\150"+
    "\27\0\10\34\6\0\5\34\3\0\1\34\1\351\26\34"+
    "\23\0\10\34\6\0\5\34\3\0\14\34\1\352\13\34"+
    "\23\0\10\34\6\0\5\34\3\0\4\34\1\353\23\34"+
    "\23\0\10\34\6\0\5\34\3\0\3\34\1\354\24\34"+
    "\23\0\10\34\6\0\5\34\3\0\13\34\1\355\14\34"+
    "\23\0\10\34\6\0\5\34\3\0\1\34\1\356\26\34"+
    "\23\0\10\34\6\0\5\34\3\0\5\34\1\357\22\34"+
    "\23\0\10\34\6\0\5\34\3\0\21\34\1\360\1\361"+
    "\5\34\23\0\10\34\6\0\5\34\3\0\1\34\1\362"+
    "\26\34\23\0\10\34\6\0\5\34\3\0\3\34\1\363"+
    "\24\34\23\0\10\34\6\0\5\34\3\0\5\34\1\364"+
    "\22\34\23\0\10\34\6\0\5\34\3\0\2\34\1\365"+
    "\25\34\23\0\10\34\6\0\5\34\3\0\13\34\1\366"+
    "\5\34\1\367\6\34\23\0\10\34\6\0\5\34\3\0"+
    "\17\34\1\370\10\34\23\0\2\34\1\371\1\372\1\373"+
    "\3\34\6\0\5\34\3\0\30\34\23\0\10\34\6\0"+
    "\5\34\3\0\20\34\1\374\7\34\23\0\10\34\6\0"+
    "\5\34\3\0\23\34\1\375\4\34\23\0\10\34\6\0"+
    "\5\34\3\0\17\34\1\376\10\34\23\0\10\34\6\0"+
    "\5\34\3\0\22\34\1\377\5\34\23\0\10\34\6\0"+
    "\5\34\3\0\23\34\1\u0100\4\34\23\0\10\34\6\0"+
    "\5\34\3\0\22\34\1\u0101\5\34\23\0\10\34\6\0"+
    "\5\34\3\0\22\34\1\u0102\5\34\23\0\10\34\6\0"+
    "\5\34\3\0\5\34\1\u0103\22\34\23\0\10\34\6\0"+
    "\5\34\3\0\5\34\1\u0104\22\34\23\0\2\34\1\u0105"+
    "\1\u0106\1\u0107\3\34\6\0\5\34\3\0\30\34\23\0"+
    "\10\34\6\0\5\34\3\0\13\34\1\u0108\14\34\23\0"+
    "\10\u0109\6\0\3\u0109\6\0\6\u0109\44\0\10\322\6\0"+
    "\3\322\6\0\6\322\14\0\1\150\27\0\10\34\6\0"+
    "\5\34\3\0\1\34\1\u010a\26\34\23\0\10\34\6\0"+
    "\5\34\3\0\3\34\1\u010b\24\34\23\0\10\34\6\0"+
    "\5\34\3\0\24\34\1\u010c\3\34\23\0\10\34\6\0"+
    "\5\34\3\0\10\34\1\u010d\17\34\23\0\10\34\6\0"+
    "\5\34\3\0\6\34\1\u010e\12\34\1\u010f\1\34\1\u0110"+
    "\4\34\23\0\10\34\6\0\5\34\3\0\6\34\1\u0111"+
    "\12\34\1\u0112\1\34\1\u0113\4\34\23\0\10\34\6\0"+
    "\5\34\3\0\11\34\1\u0114\3\34\1\u0115\12\34\23\0"+
    "\10\34\6\0\5\34\3\0\11\34\1\u0116\3\34\1\u0117"+
    "\12\34\23\0\10\34\6\0\5\34\3\0\4\34\1\u0118"+
    "\23\34\23\0\1\34\1\u0119\4\34\1\u011a\1\34\6\0"+
    "\5\34\3\0\30\34\23\0\2\34\1\u011b\5\34\6\0"+
    "\5\34\3\0\30\34\23\0\10\34\6\0\5\34\3\0"+
    "\21\34\1\u011c\1\34\1\u011d\4\34\23\0\1\34\1\u011e"+
    "\6\34\6\0\5\34\3\0\1\34\1\u011f\26\34\23\0"+
    "\10\34\6\0\5\34\3\0\20\34\1\u0120\7\34\23\0"+
    "\10\34\6\0\5\34\3\0\6\34\1\u0121\21\34\23\0"+
    "\10\34\6\0\5\34\3\0\12\34\1\u0122\15\34\23\0"+
    "\10\34\6\0\5\34\3\0\22\34\1\u0123\5\34\23\0"+
    "\10\34\6\0\5\34\3\0\21\34\1\367\6\34\21\0"+
    "\1\347\1\0\10\345\6\0\3\345\1\0\1\350\4\0"+
    "\6\345\10\0\1\350\33\0\10\347\6\0\3\347\1\0"+
    "\1\350\4\0\6\347\10\0\1\350\26\0\1\u0124\1\0"+
    "\1\u0124\2\0\10\u0125\71\0\10\34\6\0\5\34\3\0"+
    "\27\34\1\u0126\23\0\10\34\6\0\5\34\3\0\11\34"+
    "\1\u0127\16\34\23\0\10\34\6\0\5\34\3\0\11\34"+
    "\1\u0128\16\34\23\0\10\34\6\0\5\34\3\0\1\34"+
    "\1\u0129\26\34\23\0\10\34\6\0\5\34\3\0\12\34"+
    "\1\u012a\15\34\23\0\10\34\6\0\5\34\3\0\22\34"+
    "\1\u012b\5\34\23\0\10\34\6\0\5\34\3\0\11\34"+
    "\1\u012c\16\34\23\0\10\34\6\0\5\34\3\0\23\34"+
    "\1\u012d\4\34\23\0\10\34\6\0\5\34\3\0\1\34"+
    "\1\u012e\26\34\23\0\10\34\6\0\5\34\3\0\13\34"+
    "\1\u012f\14\34\23\0\10\34\6\0\5\34\3\0\22\34"+
    "\1\u0130\5\34\23\0\10\34\6\0\5\34\3\0\5\34"+
    "\1\u0131\22\34\23\0\10\34\6\0\5\34\3\0\26\34"+
    "\1\u0132\1\34\23\0\10\34\6\0\5\34\3\0\26\34"+
    "\1\u0133\1\34\23\0\10\34\6\0\5\34\3\0\26\34"+
    "\1\u0134\1\34\23\0\10\34\6\0\5\34\3\0\20\34"+
    "\1\u0135\7\34\23\0\10\34\6\0\5\34\3\0\20\34"+
    "\1\u0136\7\34\23\0\10\34\6\0\5\34\3\0\13\34"+
    "\1\u0137\14\34\23\0\10\34\6\0\5\34\3\0\11\34"+
    "\1\u0138\16\34\23\0\10\34\6\0\5\34\3\0\3\34"+
    "\1\u0139\24\34\23\0\10\34\6\0\5\34\3\0\3\34"+
    "\1\u013a\24\34\23\0\10\34\6\0\5\34\3\0\23\34"+
    "\1\u013b\4\34\23\0\10\34\6\0\5\34\3\0\5\34"+
    "\1\u013c\22\34\23\0\7\34\1\u013d\6\0\5\34\3\0"+
    "\30\34\23\0\10\34\6\0\5\34\3\0\22\34\1\u013e"+
    "\5\34\23\0\10\34\6\0\5\34\3\0\1\34\1\u013f"+
    "\26\34\23\0\10\34\6\0\5\34\3\0\1\u0140\27\34"+
    "\23\0\10\34\6\0\5\34\3\0\13\34\1\u0141\14\34"+
    "\23\0\10\34\6\0\5\34\3\0\11\34\1\u0142\16\34"+
    "\23\0\10\34\6\0\5\34\3\0\11\34\1\u0143\16\34"+
    "\23\0\10\34\6\0\5\34\3\0\13\34\1\u0144\14\34"+
    "\23\0\10\34\6\0\5\34\3\0\11\34\1\u0145\16\34"+
    "\23\0\10\34\6\0\5\34\3\0\11\34\1\u0146\16\34"+
    "\23\0\10\34\6\0\5\34\3\0\15\34\1\u0147\12\34"+
    "\23\0\10\34\6\0\5\34\3\0\16\34\1\u0148\11\34"+
    "\23\0\10\34\6\0\5\34\3\0\15\34\1\u0149\12\34"+
    "\23\0\10\34\6\0\5\34\3\0\16\34\1\u014a\11\34"+
    "\23\0\10\34\6\0\5\34\3\0\1\u014b\27\34\23\0"+
    "\10\34\6\0\5\34\3\0\2\34\1\u014c\25\34\23\0"+
    "\10\34\6\0\5\34\3\0\6\34\1\u014d\12\34\1\u014e"+
    "\1\34\1\u014f\4\34\23\0\10\34\6\0\5\34\3\0"+
    "\6\34\1\u0150\12\34\1\u0151\1\34\1\u0152\4\34\23\0"+
    "\10\34\6\0\5\34\3\0\11\34\1\u0153\3\34\1\u0154"+
    "\12\34\23\0\10\34\6\0\5\34\3\0\11\34\1\u0155"+
    "\3\34\1\u0156\12\34\23\0\1\u0157\7\34\6\0\5\34"+
    "\3\0\30\34\23\0\1\34\1\u0158\1\34\1\u0159\3\34"+
    "\1\u015a\6\0\5\34\3\0\30\34\23\0\10\34\6\0"+
    "\5\34\3\0\1\34\1\u015b\26\34\23\0\10\34\6\0"+
    "\5\34\3\0\16\34\1\u015c\11\34\23\0\10\34\6\0"+
    "\5\34\3\0\7\34\1\u015d\20\34\23\0\10\34\6\0"+
    "\5\34\3\0\5\34\1\u015e\22\34\23\0\10\u0125\71\0"+
    "\10\u0125\24\0\1\u015f\44\0\10\34\6\0\5\34\3\0"+
    "\3\34\1\u0160\24\34\23\0\10\34\6\0\5\34\3\0"+
    "\15\34\1\u0161\12\34\23\0\10\34\6\0\5\34\3\0"+
    "\21\34\1\u0162\6\34\23\0\10\34\6\0\5\34\3\0"+
    "\15\34\1\u0163\12\34\23\0\10\34\6\0\5\34\3\0"+
    "\13\34\1\u0164\14\34\23\0\10\34\6\0\5\34\3\0"+
    "\20\34\1\u0165\7\34\23\0\10\34\6\0\5\34\3\0"+
    "\5\34\1\u0166\22\34\23\0\10\34\6\0\5\34\3\0"+
    "\10\34\1\u0167\17\34\23\0\2\34\1\u0168\1\u0169\1\u016a"+
    "\3\34\6\0\5\34\3\0\30\34\23\0\2\34\1\u016b"+
    "\1\u016c\1\u016d\3\34\6\0\5\34\3\0\30\34\23\0"+
    "\2\34\1\u016e\1\u016f\1\u0170\3\34\6\0\5\34\3\0"+
    "\30\34\23\0\10\34\6\0\5\34\3\0\11\34\1\u0171"+
    "\16\34\23\0\10\34\6\0\5\34\3\0\15\34\1\u0172"+
    "\12\34\23\0\10\34\6\0\5\34\3\0\5\34\1\u0173"+
    "\22\34\23\0\10\34\6\0\5\34\3\0\3\34\1\u0174"+
    "\24\34\23\0\10\34\6\0\5\34\3\0\22\34\1\u0175"+
    "\5\34\23\0\10\34\6\0\5\34\3\0\10\34\1\u0176"+
    "\17\34\23\0\10\34\6\0\5\34\3\0\20\34\1\u0177"+
    "\7\34\23\0\10\34\6\0\5\34\3\0\23\34\1\u0178"+
    "\4\34\23\0\10\34\6\0\5\34\3\0\11\34\1\u0179"+
    "\16\34\23\0\10\34\6\0\5\34\3\0\22\34\1\u017a"+
    "\5\34\23\0\10\34\6\0\5\34\3\0\3\34\1\u017b"+
    "\24\34\23\0\10\34\6\0\5\34\3\0\16\34\1\u017c"+
    "\11\34\23\0\10\34\6\0\5\34\3\0\15\34\1\u017d"+
    "\12\34\23\0\10\34\6\0\5\34\3\0\15\34\1\u017e"+
    "\12\34\23\0\10\34\6\0\5\34\3\0\16\34\1\u017f"+
    "\11\34\23\0\10\34\6\0\5\34\3\0\15\34\1\u0180"+
    "\12\34\23\0\10\34\6\0\5\34\3\0\15\34\1\u0181"+
    "\12\34\23\0\10\34\6\0\5\34\3\0\22\34\1\u0182"+
    "\5\34\23\0\10\34\6\0\5\34\3\0\20\34\1\u0183"+
    "\7\34\23\0\10\34\6\0\5\34\3\0\22\34\1\u0184"+
    "\5\34\23\0\10\34\6\0\5\34\3\0\20\34\1\u0185"+
    "\7\34\23\0\10\34\6\0\5\34\3\0\25\34\1\u0186"+
    "\2\34\23\0\1\34\1\u0187\6\34\6\0\5\34\3\0"+
    "\30\34\23\0\10\34\6\0\5\34\3\0\13\34\1\u0188"+
    "\14\34\23\0\10\34\6\0\5\34\3\0\11\34\1\u0189"+
    "\16\34\23\0\10\34\6\0\5\34\3\0\11\34\1\u018a"+
    "\16\34\23\0\10\34\6\0\5\34\3\0\13\34\1\u018b"+
    "\14\34\23\0\10\34\6\0\5\34\3\0\11\34\1\u018c"+
    "\16\34\23\0\10\34\6\0\5\34\3\0\11\34\1\u018d"+
    "\16\34\23\0\10\34\6\0\5\34\3\0\15\34\1\u018e"+
    "\12\34\23\0\10\34\6\0\5\34\3\0\16\34\1\u018f"+
    "\11\34\23\0\10\34\6\0\5\34\3\0\15\34\1\u0190"+
    "\12\34\23\0\10\34\6\0\5\34\3\0\16\34\1\u0191"+
    "\11\34\23\0\10\34\6\0\5\34\3\0\1\34\1\u0192"+
    "\26\34\23\0\6\34\1\u0193\1\34\6\0\5\34\3\0"+
    "\30\34\23\0\2\34\1\u0194\5\34\6\0\5\34\3\0"+
    "\30\34\23\0\10\34\6\0\5\34\3\0\21\34\1\u0195"+
    "\1\34\1\u0196\4\34\23\0\10\34\6\0\5\34\3\0"+
    "\7\34\1\u0197\20\34\23\0\10\34\6\0\5\34\3\0"+
    "\20\34\1\u0198\7\34\23\0\10\34\6\0\5\34\3\0"+
    "\20\34\1\u0199\7\34\23\0\10\34\6\0\5\34\3\0"+
    "\7\34\1\u019a\20\34\23\0\10\34\6\0\5\34\3\0"+
    "\22\34\1\u019b\5\34\23\0\10\34\6\0\5\34\3\0"+
    "\23\34\1\u019c\4\34\23\0\10\34\6\0\5\34\3\0"+
    "\22\34\1\u019d\5\34\23\0\10\34\6\0\5\34\3\0"+
    "\4\34\1\u019e\23\34\23\0\10\34\6\0\5\34\3\0"+
    "\20\34\1\u019f\7\34\23\0\10\34\6\0\5\34\3\0"+
    "\4\34\1\u01a0\23\34\23\0\10\34\6\0\5\34\3\0"+
    "\20\34\1\u01a1\7\34\23\0\10\34\6\0\1\u01a2\4\34"+
    "\3\0\30\34\23\0\10\34\6\0\5\34\3\0\5\34"+
    "\1\u01a3\22\34\23\0\10\34\6\0\5\34\3\0\15\34"+
    "\1\u01a4\12\34\23\0\10\34\6\0\5\34\3\0\16\34"+
    "\1\u01a5\11\34\23\0\10\34\6\0\5\34\3\0\5\34"+
    "\1\u01a6\22\34\23\0\10\34\6\0\5\34\3\0\16\34"+
    "\1\u01a7\11\34\23\0\10\34\6\0\5\34\3\0\1\34"+
    "\1\u01a8\26\34\23\0\10\34\6\0\5\34\3\0\22\34"+
    "\1\u01a9\5\34\23\0\10\34\6\0\5\34\3\0\22\34"+
    "\1\u01aa\5\34\23\0\10\34\6\0\5\34\3\0\1\34"+
    "\1\u01ab\26\34\23\0\10\34\6\0\5\34\3\0\22\34"+
    "\1\u01ac\5\34\23\0\10\34\6\0\5\34\3\0\22\34"+
    "\1\u01ad\5\34\23\0\10\34\6\0\5\34\3\0\14\34"+
    "\1\u01ae\13\34\23\0\10\34\6\0\5\34\3\0\14\34"+
    "\1\u01af\13\34\23\0\10\34\6\0\5\34\3\0\20\34"+
    "\1\u01b0\7\34\23\0\1\u01b1\7\34\6\0\5\34\3\0"+
    "\30\34\23\0\10\34\6\0\5\34\3\0\16\34\1\u01b2"+
    "\11\34\23\0\10\34\6\0\5\34\3\0\15\34\1\u01b3"+
    "\12\34\23\0\10\34\6\0\5\34\3\0\15\34\1\u01b4"+
    "\12\34\23\0\10\34\6\0\5\34\3\0\16\34\1\u01b5"+
    "\11\34\23\0\10\34\6\0\5\34\3\0\15\34\1\u01b6"+
    "\12\34\23\0\10\34\6\0\5\34\3\0\15\34\1\u01b7"+
    "\12\34\23\0\10\34\6\0\5\34\3\0\22\34\1\u01b8"+
    "\5\34\23\0\10\34\6\0\5\34\3\0\20\34\1\u01b9"+
    "\7\34\23\0\10\34\6\0\5\34\3\0\22\34\1\u01ba"+
    "\5\34\23\0\10\34\6\0\5\34\3\0\20\34\1\u01bb"+
    "\7\34\23\0\2\34\1\u01bc\5\34\6\0\5\34\3\0"+
    "\30\34\23\0\10\34\6\0\5\34\3\0\6\34\1\u01bd"+
    "\12\34\1\u01be\1\34\1\u01bf\4\34\23\0\10\34\6\0"+
    "\5\34\3\0\6\34\1\u01c0\12\34\1\u01c1\1\34\1\u01c2"+
    "\4\34\23\0\10\34\6\0\5\34\3\0\11\34\1\u01c3"+
    "\3\34\1\u01c4\12\34\23\0\10\34\6\0\5\34\3\0"+
    "\11\34\1\u01c5\3\34\1\u01c6\12\34\23\0\10\34\6\0"+
    "\5\34\3\0\5\34\1\u01c7\22\34\23\0\10\34\6\0"+
    "\5\34\3\0\14\34\1\u01c8\13\34\23\0\10\34\6\0"+
    "\5\34\3\0\16\34\1\u01c9\11\34\23\0\10\34\6\0"+
    "\5\34\3\0\1\u01ca\27\34\23\0\10\34\6\0\5\34"+
    "\3\0\5\34\1\u01cb\3\34\1\u01cc\16\34\23\0\10\34"+
    "\6\0\5\34\3\0\16\34\1\u01cd\11\34\23\0\10\34"+
    "\6\0\5\34\3\0\5\34\1\u01ce\22\34\23\0\10\34"+
    "\6\0\5\34\3\0\1\u01cf\27\34\23\0\10\34\6\0"+
    "\5\34\3\0\21\34\1\u01d0\6\34\23\0\10\34\6\0"+
    "\5\34\3\0\1\u01d1\27\34\23\0\10\34\6\0\5\34"+
    "\3\0\16\34\1\u01d2\11\34\23\0\10\34\6\0\5\34"+
    "\3\0\15\34\1\u01d3\12\34\23\0\10\34\6\0\5\34"+
    "\3\0\15\34\1\u01d4\12\34\23\0\10\34\6\0\5\34"+
    "\3\0\22\34\1\u01d5\5\34\23\0\10\34\6\0\5\34"+
    "\3\0\22\34\1\u01d6\5\34\23\0\10\34\6\0\5\34"+
    "\3\0\11\34\1\u01d7\16\34\23\0\10\34\6\0\5\34"+
    "\3\0\6\34\1\u01d8\21\34\23\0\10\34\6\0\5\34"+
    "\3\0\1\34\1\u01d9\26\34\23\0\10\34\6\0\5\34"+
    "\3\0\22\34\1\u01da\5\34\23\0\10\34\6\0\5\34"+
    "\3\0\22\34\1\u01db\5\34\23\0\10\34\6\0\5\34"+
    "\3\0\1\34\1\u01dc\26\34\23\0\10\34\6\0\5\34"+
    "\3\0\22\34\1\u01dd\5\34\23\0\10\34\6\0\5\34"+
    "\3\0\22\34\1\u01de\5\34\23\0\10\34\6\0\5\34"+
    "\3\0\14\34\1\u01df\13\34\23\0\10\34\6\0\5\34"+
    "\3\0\14\34\1\u01e0\13\34\23\0\10\34\6\0\5\34"+
    "\3\0\23\34\1\u01e1\4\34\23\0\10\34\6\0\5\34"+
    "\3\0\13\34\1\u01e2\14\34\23\0\10\34\6\0\5\34"+
    "\3\0\11\34\1\u01e3\16\34\23\0\10\34\6\0\5\34"+
    "\3\0\11\34\1\u01e4\16\34\23\0\10\34\6\0\5\34"+
    "\3\0\13\34\1\u01e5\14\34\23\0\10\34\6\0\5\34"+
    "\3\0\11\34\1\u01e6\16\34\23\0\10\34\6\0\5\34"+
    "\3\0\11\34\1\u01e7\16\34\23\0\10\34\6\0\5\34"+
    "\3\0\15\34\1\u01e8\12\34\23\0\10\34\6\0\5\34"+
    "\3\0\16\34\1\u01e9\11\34\23\0\10\34\6\0\5\34"+
    "\3\0\15\34\1\u01ea\12\34\23\0\10\34\6\0\5\34"+
    "\3\0\16\34\1\u01eb\11\34\23\0\10\34\6\0\5\34"+
    "\3\0\23\34\1\u01ec\4\34\23\0\10\34\6\0\5\34"+
    "\3\0\1\34\1\u01ed\26\34\23\0\10\34\6\0\5\34"+
    "\3\0\15\34\1\u01ee\12\34\23\0\10\34\6\0\5\34"+
    "\3\0\23\34\1\u01ef\4\34\23\0\10\34\6\0\5\34"+
    "\3\0\3\34\1\u01f0\24\34\23\0\10\34\6\0\5\34"+
    "\3\0\21\34\1\u01f1\6\34\23\0\1\34\1\u01f2\1\u01f3"+
    "\1\u01f4\4\34\6\0\5\34\3\0\3\34\1\u01f5\1\u01f6"+
    "\7\34\1\u01f7\4\34\1\u01f8\6\34\23\0\10\34\6\0"+
    "\5\34\3\0\20\34\1\u01f9\7\34\23\0\10\34\6\0"+
    "\5\34\3\0\21\34\1\u01fa\6\34\23\0\10\34\6\0"+
    "\5\34\3\0\22\34\1\u01fb\5\34\23\0\10\34\6\0"+
    "\5\34\3\0\13\34\1\u01fc\14\34\23\0\10\34\6\0"+
    "\5\34\3\0\22\34\1\u01fd\5\34\23\0\10\34\6\0"+
    "\5\34\3\0\22\34\1\u01fe\5\34\23\0\10\34\6\0"+
    "\5\34\3\0\15\34\1\u01ff\12\34\23\0\10\34\6\0"+
    "\5\34\3\0\16\34\1\u0200\11\34\23\0\10\34\6\0"+
    "\5\34\3\0\15\34\1\u0201\12\34\23\0\10\34\6\0"+
    "\5\34\3\0\15\34\1\u0202\12\34\23\0\10\34\6\0"+
    "\5\34\3\0\16\34\1\u0203\11\34\23\0\10\34\6\0"+
    "\5\34\3\0\15\34\1\u0204\12\34\23\0\10\34\6\0"+
    "\5\34\3\0\15\34\1\u0205\12\34\23\0\10\34\6\0"+
    "\5\34\3\0\22\34\1\u0206\5\34\23\0\10\34\6\0"+
    "\5\34\3\0\20\34\1\u0207\7\34\23\0\10\34\6\0"+
    "\5\34\3\0\22\34\1\u0208\5\34\23\0\10\34\6\0"+
    "\5\34\3\0\20\34\1\u0209\7\34\23\0\10\34\6\0"+
    "\5\34\3\0\17\34\1\u020a\10\34\23\0\10\34\6\0"+
    "\5\34\3\0\20\34\1\u020b\7\34\23\0\10\34\6\0"+
    "\5\34\3\0\7\34\1\u020c\20\34\23\0\10\34\6\0"+
    "\5\34\3\0\7\34\1\u020d\20\34\23\0\10\34\6\0"+
    "\5\34\3\0\16\34\1\u020e\11\34\23\0\10\34\6\0"+
    "\5\34\3\0\5\34\1\u020f\22\34\23\0\10\34\6\0"+
    "\5\34\3\0\4\34\1\u0210\23\34\23\0\10\34\6\0"+
    "\5\34\3\0\4\34\1\u0211\23\34\23\0\10\34\6\0"+
    "\5\34\3\0\4\34\1\u0212\23\34\23\0\10\34\6\0"+
    "\5\34\3\0\23\34\1\u0213\4\34\23\0\10\34\6\0"+
    "\5\34\3\0\5\34\1\u0214\22\34\23\0\10\34\6\0"+
    "\5\34\3\0\23\34\1\u0215\4\34\23\0\10\34\6\0"+
    "\5\34\3\0\22\34\1\u0216\5\34\23\0\10\34\6\0"+
    "\5\34\3\0\14\34\1\u0217\13\34\23\0\10\34\6\0"+
    "\5\34\3\0\22\34\1\u0218\5\34\23\0\10\34\6\0"+
    "\5\34\3\0\5\34\1\u0219\22\34\23\0\10\34\6\0"+
    "\5\34\3\0\16\34\1\u021a\11\34\23\0\10\34\6\0"+
    "\5\34\3\0\16\34\1\u021b\11\34\23\0\10\34\6\0"+
    "\5\34\3\0\1\34\1\u021c\26\34\23\0\10\34\6\0"+
    "\5\34\3\0\22\34\1\u021d\5\34\23\0\10\34\6\0"+
    "\5\34\3\0\22\34\1\u021e\5\34\23\0\10\34\6\0"+
    "\5\34\3\0\1\34\1\u021f\26\34\23\0\10\34\6\0"+
    "\5\34\3\0\22\34\1\u0220\5\34\23\0\10\34\6\0"+
    "\5\34\3\0\22\34\1\u0221\5\34\23\0\10\34\6\0"+
    "\5\34\3\0\14\34\1\u0222\13\34\23\0\10\34\6\0"+
    "\5\34\3\0\14\34\1\u0223\13\34\23\0\10\34\6\0"+
    "\5\34\3\0\20\34\1\u0224\7\34\23\0\10\34\6\0"+
    "\5\34\3\0\10\34\1\u0225\17\34\23\0\10\34\6\0"+
    "\5\34\3\0\14\34\1\u0226\13\34\23\0\10\34\6\0"+
    "\5\34\3\0\20\34\1\u0227\7\34\23\0\10\34\6\0"+
    "\5\34\3\0\1\u0228\27\34\23\0\10\34\6\0\5\34"+
    "\3\0\2\34\1\u0229\25\34\23\0\10\34\6\0\5\34"+
    "\3\0\17\34\1\u022a\10\34\23\0\10\34\6\0\5\34"+
    "\3\0\13\34\1\u022b\14\34\23\0\10\34\6\0\5\34"+
    "\3\0\16\34\1\u022c\11\34\23\0\10\34\6\0\5\34"+
    "\3\0\1\u022d\27\34\23\0\10\34\6\0\5\34\3\0"+
    "\1\34\1\u022e\26\34\23\0\10\34\6\0\5\34\3\0"+
    "\1\34\1\u022f\26\34\23\0\10\34\6\0\5\34\3\0"+
    "\20\34\1\u0230\7\34\23\0\10\34\6\0\5\34\3\0"+
    "\22\34\1\u0231\5\34\23\0\10\34\6\0\5\34\3\0"+
    "\22\34\1\u0232\5\34\23\0\10\34\6\0\5\34\3\0"+
    "\1\u0233\27\34\23\0\10\34\6\0\5\34\3\0\1\34"+
    "\1\u0234\26\34\23\0\10\34\6\0\5\34\3\0\17\34"+
    "\1\u0235\10\34\23\0\10\34\6\0\5\34\3\0\22\34"+
    "\1\u0236\5\34\23\0\10\34\6\0\5\34\3\0\1\34"+
    "\1\u0237\26\34\23\0\10\34\6\0\5\34\3\0\5\34"+
    "\1\u0238\22\34\23\0\10\34\6\0\5\34\3\0\22\34"+
    "\1\u0239\5\34\23\0\10\34\6\0\5\34\3\0\22\34"+
    "\1\u023a\5\34\23\0\10\34\6\0\5\34\3\0\20\34"+
    "\1\u023b\7\34\23\0\10\34\6\0\5\34\3\0\21\34"+
    "\1\u023c\6\34\23\0\10\34\6\0\5\34\3\0\15\34"+
    "\1\u023d\12\34\23\0\10\34\6\0\5\34\3\0\22\34"+
    "\1\u023e\5\34\23\0\10\34\6\0\5\34\3\0\14\34"+
    "\1\u023f\13\34\23\0\10\34\6\0\5\34\3\0\21\34"+
    "\1\u0240\6\34\23\0\10\34\6\0\5\34\3\0\27\34"+
    "\1\u0241\23\0\10\34\6\0\5\34\3\0\1\34\1\u0242"+
    "\26\34\23\0\10\34\6\0\5\34\3\0\20\34\1\u0243"+
    "\7\34\23\0\10\34\6\0\5\34\3\0\1\u0244\27\34"+
    "\23\0\10\34\6\0\5\34\3\0\10\34\1\u0245\17\34"+
    "\23\0\10\34\6\0\5\34\3\0\11\34\1\u0246\16\34"+
    "\23\0\10\34\6\0\5\34\3\0\1\34\1\u0247\26\34"+
    "\23\0\10\34\6\0\5\34\3\0\20\34\1\u0248\7\34"+
    "\23\0\10\34\6\0\5\34\3\0\22\34\1\u0249\5\34"+
    "\23\0\10\34\6\0\5\34\3\0\20\34\1\u024a\7\34"+
    "\23\0\10\34\6\0\5\34\3\0\20\34\1\u024b\7\34"+
    "\23\0\10\34\6\0\5\34\3\0\20\34\1\u024c\7\34"+
    "\23\0\10\34\6\0\5\34\3\0\1\34\1\u024d\26\34"+
    "\23\0\10\34\6\0\5\34\3\0\1\u024e\27\34\23\0"+
    "\10\34\6\0\5\34\3\0\21\34\1\u024f\6\34\23\0"+
    "\10\34\6\0\5\34\3\0\7\34\1\u0250\20\34\23\0"+
    "\10\34\6\0\5\34\3\0\7\34\1\u0251\20\34\23\0"+
    "\10\34\6\0\5\34\3\0\7\34\1\u0252\20\34\23\0"+
    "\10\34\6\0\5\34\3\0\11\34\1\u0253\16\34\23\0"+
    "\10\34\6\0\5\34\3\0\1\34\1\u0254\26\34\23\0"+
    "\10\34\6\0\5\34\3\0\20\34\1\u0255\7\34\23\0"+
    "\2\34\1\u0256\5\34\6\0\5\34\3\0\3\34\1\u0257"+
    "\10\34\1\u0258\13\34\23\0\10\34\6\0\5\34\3\0"+
    "\1\34\1\u0259\26\34\23\0\10\34\6\0\5\34\3\0"+
    "\5\34\1\u025a\22\34\23\0\10\34\6\0\5\34\3\0"+
    "\2\34\1\u025b\25\34\23\0\10\34\6\0\5\34\3\0"+
    "\2\34\1\u025c\25\34\23\0\10\34\6\0\5\34\3\0"+
    "\21\34\1\u025d\6\34\23\0\10\34\6\0\5\34\3\0"+
    "\27\34\1\u025e\23\0\10\34\6\0\5\34\3\0\20\34"+
    "\1\u025f\7\34\23\0\10\34\6\0\5\34\3\0\4\34"+
    "\1\u0260\23\34\23\0\10\34\6\0\5\34\3\0\23\34"+
    "\1\u0261\4\34\23\0\10\34\6\0\5\34\3\0\23\34"+
    "\1\u0262\4\34\23\0\10\34\6\0\5\34\3\0\14\34"+
    "\1\u0263\13\34\23\0\10\34\6\0\5\34\3\0\1\u0264"+
    "\27\34\23\0\10\34\6\0\5\34\3\0\16\34\1\u0265"+
    "\11\34\23\0\10\34\6\0\5\34\3\0\1\34\1\u0266"+
    "\26\34\23\0\10\34\6\0\5\34\3\0\1\u0267\27\34"+
    "\23\0\10\34\6\0\5\34\3\0\2\34\1\u0268\25\34"+
    "\23\0\10\34\6\0\5\34\3\0\13\34\1\u0269\14\34"+
    "\23\0\10\34\6\0\5\34\3\0\17\34\1\u026a\10\34"+
    "\23\0\1\34\1\u026b\1\u026c\1\u026d\4\34\6\0\5\34"+
    "\3\0\30\34\23\0\10\34\6\0\5\34\3\0\15\34"+
    "\1\u026e\12\34\23\0\10\34\6\0\5\34\3\0\27\34"+
    "\1\u026f\23\0\10\34\6\0\5\34\3\0\1\34\1\u0270"+
    "\26\34\23\0\10\34\6\0\5\34\3\0\5\34\1\u0271"+
    "\22\34\23\0\10\34\6\0\5\34\3\0\22\34\1\u0272"+
    "\5\34\23\0\10\34\6\0\5\34\3\0\13\34\1\u0273"+
    "\14\34\23\0\10\34\6\0\5\34\3\0\4\34\1\u0274"+
    "\23\34\23\0\10\34\6\0\5\34\3\0\4\34\1\u0275"+
    "\23\34\23\0\10\34\6\0\5\34\3\0\4\34\1\u0276"+
    "\23\34\23\0\10\34\6\0\5\34\3\0\20\34\1\u0277"+
    "\7\34\23\0\10\34\6\0\5\34\3\0\1\u0278\27\34"+
    "\23\0\10\34\6\0\5\34\3\0\11\34\1\u0279\16\34"+
    "\23\0\10\34\6\0\5\34\3\0\5\34\1\u027a\22\34"+
    "\23\0\10\34\6\0\5\34\3\0\1\u027b\27\34\23\0"+
    "\10\34\6\0\5\34\3\0\20\34\1\u027c\7\34\23\0"+
    "\10\34\6\0\5\34\3\0\1\34\1\u027d\26\34\23\0"+
    "\10\34\6\0\5\34\3\0\21\34\1\u027e\6\34\23\0"+
    "\10\34\6\0\5\34\3\0\4\34\1\u027f\23\34\23\0"+
    "\10\34\6\0\5\34\3\0\1\34\1\u0280\26\34\23\0"+
    "\10\34\6\0\5\34\3\0\1\34\1\u0281\26\34\23\0"+
    "\10\34\6\0\5\34\3\0\20\34\1\u0282\7\34\23\0"+
    "\10\34\6\0\5\34\3\0\1\34\1\u0283\26\34\23\0"+
    "\10\34\6\0\5\34\3\0\1\u0284\27\34\23\0\10\34"+
    "\6\0\5\34\3\0\20\34\1\u0285\7\34\23\0\10\34"+
    "\6\0\5\34\3\0\27\34\1\u0286\23\0\10\34\6\0"+
    "\5\34\3\0\20\34\1\u0287\7\34\23\0\10\34\6\0"+
    "\5\34\3\0\14\34\1\u0288\13\34\23\0\2\34\1\u0289"+
    "\5\34\6\0\5\34\3\0\30\34\23\0\10\34\6\0"+
    "\5\34\3\0\20\34\1\u028a\7\34\23\0\10\34\6\0"+
    "\5\34\3\0\1\34\1\u028b\26\34\23\0\10\34\6\0"+
    "\5\34\3\0\17\34\1\u028c\10\34\23\0\10\34\6\0"+
    "\5\34\3\0\4\34\1\u028d\23\34\23\0\10\34\6\0"+
    "\5\34\3\0\1\34\1\u028e\26\34\23\0\10\34\6\0"+
    "\5\34\3\0\27\34\1\u028f\23\0\10\34\6\0\5\34"+
    "\3\0\13\34\1\u0290\14\34\23\0\10\34\6\0\5\34"+
    "\3\0\27\34\1\u0291\23\0\10\34\6\0\5\34\3\0"+
    "\5\34\1\u0292\22\34\23\0\10\34\6\0\5\34\3\0"+
    "\4\34\1\u0293\23\34\23\0\10\34\6\0\5\34\3\0"+
    "\1\u0294\27\34\23\0\2\34\1\u0295\5\34\6\0\5\34"+
    "\3\0\30\34\23\0\10\34\6\0\5\34\3\0\4\34"+
    "\1\u0296\23\34\4\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[33670];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\1\11\5\1\2\11\2\1\1\11\5\1\2\11"+
    "\3\1\1\11\2\1\1\11\23\1\1\11\1\1\2\11"+
    "\3\1\1\11\4\1\4\11\23\1\10\11\2\0\1\1"+
    "\2\11\3\1\1\11\2\0\1\11\1\0\1\1\3\11"+
    "\1\1\2\11\41\1\2\11\2\0\1\1\1\0\15\1"+
    "\1\11\1\1\1\0\1\11\2\0\1\1\1\0\1\1"+
    "\2\11\41\1\1\0\24\1\1\11\1\1\1\0\73\1"+
    "\1\0\72\1\1\11\u0137\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[662];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  private static final class State {
    final int state;

    private State(int state) {
      this.state = state;
    }
  }

  protected final Stack<State> myStateStack = new Stack<>();

  private void pushState(int state) {
    myStateStack.push(new State(yystate()));
    yybegin(state);
  }

  private void popState() {
    State state = myStateStack.pop();
    yybegin(state.state);
  }

  public _WgslLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _WgslLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL.charAt(zzMarkedPosL-1)) {
        case '\n':
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':  // fall through
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return BAD_CHARACTER;
            }
          // fall through
          case 172: break;
          case 2:
            { return WHITE_SPACE;
            }
          // fall through
          case 173: break;
          case 3:
            { return BANG;
            }
          // fall through
          case 174: break;
          case 4:
            { return MODULO;
            }
          // fall through
          case 175: break;
          case 5:
            { return AND;
            }
          // fall through
          case 176: break;
          case 6:
            { return PAREN_LEFT;
            }
          // fall through
          case 177: break;
          case 7:
            { return PAREN_RIGHT;
            }
          // fall through
          case 178: break;
          case 8:
            { return STAR;
            }
          // fall through
          case 179: break;
          case 9:
            { return PLUS;
            }
          // fall through
          case 180: break;
          case 10:
            { return COMMA;
            }
          // fall through
          case 181: break;
          case 11:
            { return MINUS;
            }
          // fall through
          case 182: break;
          case 12:
            { return PERIOD;
            }
          // fall through
          case 183: break;
          case 13:
            { return FORWARD_SLASH;
            }
          // fall through
          case 184: break;
          case 14:
            { return INT_LITERAL;
            }
          // fall through
          case 185: break;
          case 15:
            { return COLON;
            }
          // fall through
          case 186: break;
          case 16:
            { return SEMICOLON;
            }
          // fall through
          case 187: break;
          case 17:
            { return LESS_THAN;
            }
          // fall through
          case 188: break;
          case 18:
            { return EQUAL;
            }
          // fall through
          case 189: break;
          case 19:
            { return GREATER_THAN;
            }
          // fall through
          case 190: break;
          case 20:
            { return AT;
            }
          // fall through
          case 191: break;
          case 21:
            { return IDENT;
            }
          // fall through
          case 192: break;
          case 22:
            { return BRACKET_LEFT;
            }
          // fall through
          case 193: break;
          case 23:
            { return BRACKET_RIGHT;
            }
          // fall through
          case 194: break;
          case 24:
            { return XOR;
            }
          // fall through
          case 195: break;
          case 25:
            { return UNDERSCORE;
            }
          // fall through
          case 196: break;
          case 26:
            { return BRACE_LEFT;
            }
          // fall through
          case 197: break;
          case 27:
            { return OR;
            }
          // fall through
          case 198: break;
          case 28:
            { return BRACE_RIGHT;
            }
          // fall through
          case 199: break;
          case 29:
            { return TILDE;
            }
          // fall through
          case 200: break;
          case 30:
            { return PREPROCESSOR_DECLARATION;
            }
          // fall through
          case 201: break;
          case 31:
            { popState(); return PAREN_LEFT;
            }
          // fall through
          case 202: break;
          case 32:
            { popState(); return COLON;
            }
          // fall through
          case 203: break;
          case 33:
            { return TYPE_LESS_THAN;
            }
          // fall through
          case 204: break;
          case 34:
            { popState(); return EQUAL;
            }
          // fall through
          case 205: break;
          case 35:
            { popState(); return TYPE_GREATER_THAN;
            }
          // fall through
          case 206: break;
          case 36:
            { return NOT_EQUAL;
            }
          // fall through
          case 207: break;
          case 37:
            { return MODULO_EQUAL;
            }
          // fall through
          case 208: break;
          case 38:
            { return AND_AND;
            }
          // fall through
          case 209: break;
          case 39:
            { return AND_EQUAL;
            }
          // fall through
          case 210: break;
          case 40:
            { return TIMES_EQUAL;
            }
          // fall through
          case 211: break;
          case 41:
            { return PLUS_PLUS;
            }
          // fall through
          case 212: break;
          case 42:
            { return PLUS_EQUAL;
            }
          // fall through
          case 213: break;
          case 43:
            { return MINUS_MINUS;
            }
          // fall through
          case 214: break;
          case 44:
            { return MINUS_EQUAL;
            }
          // fall through
          case 215: break;
          case 45:
            { return ARROW;
            }
          // fall through
          case 216: break;
          case 46:
            { return DECIMAL_FLOAT_LITERAL;
            }
          // fall through
          case 217: break;
          case 47:
            { return BLOCK_COMMENT;
            }
          // fall through
          case 218: break;
          case 48:
            { return LINE_COMMENT;
            }
          // fall through
          case 219: break;
          case 49:
            { return DIVISION_EQUAL;
            }
          // fall through
          case 220: break;
          case 50:
            { return UINT_LITERAL;
            }
          // fall through
          case 221: break;
          case 51:
            { return SHIFT_LEFT;
            }
          // fall through
          case 222: break;
          case 52:
            { return LESS_THAN_EQUAL;
            }
          // fall through
          case 223: break;
          case 53:
            { return EQUAL_EQUAL;
            }
          // fall through
          case 224: break;
          case 54:
            { return GREATER_THAN_EQUAL;
            }
          // fall through
          case 225: break;
          case 55:
            { return SHIFT_RIGHT;
            }
          // fall through
          case 226: break;
          case 56:
            { pushState(ATTRIBUTE); return ATTR_LEFT;
            }
          // fall through
          case 227: break;
          case 57:
            { return XOR_EQUAL;
            }
          // fall through
          case 228: break;
          case 58:
            { return FN;
            }
          // fall through
          case 229: break;
          case 59:
            { return IF;
            }
          // fall through
          case 230: break;
          case 60:
            { return OR_EQUAL;
            }
          // fall through
          case 231: break;
          case 61:
            { return OR_OR;
            }
          // fall through
          case 232: break;
          case 62:
            { popState(); return ATTR_RIGHT;
            }
          // fall through
          case 233: break;
          case 63:
            { return SHIFT_LEFT_EQUAL;
            }
          // fall through
          case 234: break;
          case 64:
            { return SHIFT_RIGHT_EQUAL;
            }
          // fall through
          case 235: break;
          case 65:
            { return FLOAT32;
            }
          // fall through
          case 236: break;
          case 66:
            { return FOR;
            }
          // fall through
          case 237: break;
          case 67:
            { return INT32;
            }
          // fall through
          case 238: break;
          case 68:
            { return LET;
            }
          // fall through
          case 239: break;
          case 69:
            { pushState(TYPE_SPEC); return POINTER;
            }
          // fall through
          case 240: break;
          case 70:
            { return UINT32;
            }
          // fall through
          case 241: break;
          case 71:
            { pushState(TYPE_SPEC); return VAR;
            }
          // fall through
          case 242: break;
          case 72:
            { return HEX_FLOAT_LITERAL;
            }
          // fall through
          case 243: break;
          case 73:
            { return BOOL;
            }
          // fall through
          case 244: break;
          case 74:
            { return CASE;
            }
          // fall through
          case 245: break;
          case 75:
            { return ELSE;
            }
          // fall through
          case 246: break;
          case 76:
            { return LOOP;
            }
          // fall through
          case 247: break;
          case 77:
            { return TRUE;
            }
          // fall through
          case 248: break;
          case 78:
            { return TYPE;
            }
          // fall through
          case 249: break;
          case 79:
            { pushState(TYPE_SPEC); return VEC2;
            }
          // fall through
          case 250: break;
          case 80:
            { pushState(TYPE_SPEC); return VEC3;
            }
          // fall through
          case 251: break;
          case 81:
            { pushState(TYPE_SPEC); return VEC4;
            }
          // fall through
          case 252: break;
          case 82:
            { return READ;
            }
          // fall through
          case 253: break;
          case 83:
            { pushState(TYPE_SPEC); return ARRAY;
            }
          // fall through
          case 254: break;
          case 84:
            { return BREAK;
            }
          // fall through
          case 255: break;
          case 85:
            { pushState(TYPE_SPEC); return CONST;
            }
          // fall through
          case 256: break;
          case 86:
            { return FALSE;
            }
          // fall through
          case 257: break;
          case 87:
            { return WHILE;
            }
          // fall through
          case 258: break;
          case 88:
            { return WRITE;
            }
          // fall through
          case 259: break;
          case 89:
            { pushState(TYPE_SPEC); return ATOMIC;
            }
          // fall through
          case 260: break;
          case 90:
            { return ENABLE;
            }
          // fall through
          case 261: break;
          case 91:
            { pushState(TYPE_SPEC); return MAT2X2;
            }
          // fall through
          case 262: break;
          case 92:
            { pushState(TYPE_SPEC); return MAT2X3;
            }
          // fall through
          case 263: break;
          case 93:
            { pushState(TYPE_SPEC); return MAT2X4;
            }
          // fall through
          case 264: break;
          case 94:
            { pushState(TYPE_SPEC); return MAT3X2;
            }
          // fall through
          case 265: break;
          case 95:
            { pushState(TYPE_SPEC); return MAT3X3;
            }
          // fall through
          case 266: break;
          case 96:
            { pushState(TYPE_SPEC); return MAT3X4;
            }
          // fall through
          case 267: break;
          case 97:
            { pushState(TYPE_SPEC); return MAT4X2;
            }
          // fall through
          case 268: break;
          case 98:
            { pushState(TYPE_SPEC); return MAT4X3;
            }
          // fall through
          case 269: break;
          case 99:
            { pushState(TYPE_SPEC); return MAT4X4;
            }
          // fall through
          case 270: break;
          case 100:
            { return RETURN;
            }
          // fall through
          case 271: break;
          case 101:
            { return STRUCT;
            }
          // fall through
          case 272: break;
          case 102:
            { return SWITCH;
            }
          // fall through
          case 273: break;
          case 103:
            { return R8SINT;
            }
          // fall through
          case 274: break;
          case 104:
            { return R8UINT;
            }
          // fall through
          case 275: break;
          case 105:
            { pushState(TYPE_SPEC); return BITCAST;
            }
          // fall through
          case 276: break;
          case 106:
            { return DEFAULT;
            }
          // fall through
          case 277: break;
          case 107:
            { return DISCARD;
            }
          // fall through
          case 278: break;
          case 108:
            { return SAMPLER;
            }
          // fall through
          case 279: break;
          case 109:
            { return PRIVATE;
            }
          // fall through
          case 280: break;
          case 110:
            { return R16SINT;
            }
          // fall through
          case 281: break;
          case 111:
            { return R16UINT;
            }
          // fall through
          case 282: break;
          case 112:
            { return R32SINT;
            }
          // fall through
          case 283: break;
          case 113:
            { return R32UINT;
            }
          // fall through
          case 284: break;
          case 114:
            { return R8SNORM;
            }
          // fall through
          case 285: break;
          case 115:
            { return R8UNORM;
            }
          // fall through
          case 286: break;
          case 116:
            { return RG8SINT;
            }
          // fall through
          case 287: break;
          case 117:
            { return RG8UINT;
            }
          // fall through
          case 288: break;
          case 118:
            { return STORAGE;
            }
          // fall through
          case 289: break;
          case 119:
            { return UNIFORM;
            }
          // fall through
          case 290: break;
          case 120:
            { return CONTINUE;
            }
          // fall through
          case 291: break;
          case 121:
            { return OVERRIDE;
            }
          // fall through
          case 292: break;
          case 122:
            { return FUNCTION;
            }
          // fall through
          case 293: break;
          case 123:
            { return R16FLOAT;
            }
          // fall through
          case 294: break;
          case 124:
            { return R32FLOAT;
            }
          // fall through
          case 295: break;
          case 125:
            { return RG16SINT;
            }
          // fall through
          case 296: break;
          case 126:
            { return RG16UINT;
            }
          // fall through
          case 297: break;
          case 127:
            { return RG32SINT;
            }
          // fall through
          case 298: break;
          case 128:
            { return RG32UINT;
            }
          // fall through
          case 299: break;
          case 129:
            { return RG8SNORM;
            }
          // fall through
          case 300: break;
          case 130:
            { return RG8UNORM;
            }
          // fall through
          case 301: break;
          case 131:
            { return RG16FLOAT;
            }
          // fall through
          case 302: break;
          case 132:
            { return RG32FLOAT;
            }
          // fall through
          case 303: break;
          case 133:
            { return RGBA8SINT;
            }
          // fall through
          case 304: break;
          case 134:
            { return RGBA8UINT;
            }
          // fall through
          case 305: break;
          case 135:
            { return WORKGROUP;
            }
          // fall through
          case 306: break;
          case 136:
            { return CONTINUING;
            }
          // fall through
          case 307: break;
          case 137:
            { pushState(TYPE_SPEC); return TEXTURE_1D;
            }
          // fall through
          case 308: break;
          case 138:
            { pushState(TYPE_SPEC); return TEXTURE_2D;
            }
          // fall through
          case 309: break;
          case 139:
            { pushState(TYPE_SPEC); return TEXTURE_3D;
            }
          // fall through
          case 310: break;
          case 140:
            { return BGRA8UNORM;
            }
          // fall through
          case 311: break;
          case 141:
            { return READ_WRITE;
            }
          // fall through
          case 312: break;
          case 142:
            { return RGBA16SINT;
            }
          // fall through
          case 313: break;
          case 143:
            { return RGBA16UINT;
            }
          // fall through
          case 314: break;
          case 144:
            { return RGBA32SINT;
            }
          // fall through
          case 315: break;
          case 145:
            { return RGBA32UINT;
            }
          // fall through
          case 316: break;
          case 146:
            { return RGBA8SNORM;
            }
          // fall through
          case 317: break;
          case 147:
            { return RGBA8UNORM;
            }
          // fall through
          case 318: break;
          case 148:
            { return FALLTHROUGH;
            }
          // fall through
          case 319: break;
          case 149:
            { return RGBA16FLOAT;
            }
          // fall through
          case 320: break;
          case 150:
            { return RGBA32FLOAT;
            }
          // fall through
          case 321: break;
          case 151:
            { return STATIC_ASSERT;
            }
          // fall through
          case 322: break;
          case 152:
            { pushState(TYPE_SPEC); return TEXTURE_CUBE;
            }
          // fall through
          case 323: break;
          case 153:
            { return RG11B10FLOAT;
            }
          // fall through
          case 324: break;
          case 154:
            { return RGB10A2UNORM;
            }
          // fall through
          case 325: break;
          case 155:
            { pushState(BIND_SPEC); return BINDING_ARRAY;
            }
          // fall through
          case 326: break;
          case 156:
            { return PUSH_CONSTANT;
            }
          // fall through
          case 327: break;
          case 157:
            { return BGRA8UNORM_SRGB;
            }
          // fall through
          case 328: break;
          case 158:
            { return RGBA8UNORM_SRGB;
            }
          // fall through
          case 329: break;
          case 159:
            { pushState(TYPE_SPEC); return TEXTURE_2D_ARRAY;
            }
          // fall through
          case 330: break;
          case 160:
            { return TEXTURE_DEPTH_2D;
            }
          // fall through
          case 331: break;
          case 161:
            { return SAMPLER_COMPARISON;
            }
          // fall through
          case 332: break;
          case 162:
            { pushState(TYPE_SPEC); return TEXTURE_CUBE_ARRAY;
            }
          // fall through
          case 333: break;
          case 163:
            { return TEXTURE_DEPTH_CUBE;
            }
          // fall through
          case 334: break;
          case 164:
            { pushState(TYPE_SPEC); return TEXTURE_STORAGE_1D;
            }
          // fall through
          case 335: break;
          case 165:
            { pushState(TYPE_SPEC); return TEXTURE_STORAGE_2D;
            }
          // fall through
          case 336: break;
          case 166:
            { pushState(TYPE_SPEC); return TEXTURE_STORAGE_3D;
            }
          // fall through
          case 337: break;
          case 167:
            { return TEXTURE_DEPTH_2D_ARRAY;
            }
          // fall through
          case 338: break;
          case 168:
            { pushState(TYPE_SPEC); return TEXTURE_MULTISAMPLED_2D;
            }
          // fall through
          case 339: break;
          case 169:
            { return TEXTURE_DEPTH_CUBE_ARRAY;
            }
          // fall through
          case 340: break;
          case 170:
            { pushState(TYPE_SPEC); return TEXTURE_STORAGE_2D_ARRAY;
            }
          // fall through
          case 341: break;
          case 171:
            { return TEXTURE_DEPTH_MULTISAMPLED_2D;
            }
          // fall through
          case 342: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
